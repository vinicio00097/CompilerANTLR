/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

/**
 * Lexical Specification
 *
 * Contributors:
 *      Jeanderson Barros Candido - http://jeandersonbc.github.io
 *      Thiago Ferreira Patricio - http://github.com/tferreirap
 */
package compiler.generated;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>./specs/lexical.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\15\1\14\1\72\1\73\1\13\22\0\1\15\1\43\1\70"+
    "\2\0\1\51\1\52\1\0\1\66\1\67\1\12\1\44\1\63\1\4"+
    "\1\55\1\11\12\1\1\62\1\56\1\50\1\47\1\46\1\57\1\0"+
    "\4\3\1\3\1\3\5\3\1\7\10\3\1\7\5\3\1\60\1\71"+
    "\1\61\1\53\1\2\1\0\1\20\1\37\1\22\1\31\1\23\1\5"+
    "\1\34\1\36\1\21\1\3\1\40\1\6\1\30\1\27\1\32\1\26"+
    "\1\3\1\24\1\16\1\17\1\10\1\42\1\41\1\33\1\25\1\35"+
    "\1\65\1\54\1\64\1\45\6\0\1\72\u1fa2\0\1\72\1\72\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\3\3\1\5\1\6"+
    "\2\7\17\3\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\1"+
    "\1\2\1\35\1\36\1\37\1\0\7\3\1\7\1\0"+
    "\1\40\1\41\11\3\1\42\16\3\1\43\6\3\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\0"+
    "\1\64\1\0\1\65\1\0\3\3\1\66\4\3\2\0"+
    "\13\3\1\67\14\3\1\70\13\3\1\71\1\72\1\73"+
    "\3\3\1\74\3\3\1\0\7\3\1\75\1\3\1\76"+
    "\1\3\1\77\1\3\1\100\2\3\1\101\1\102\6\3"+
    "\1\103\5\3\1\104\1\3\1\105\2\3\1\106\1\107"+
    "\1\110\1\111\1\112\1\3\1\113\5\3\1\114\5\3"+
    "\1\115\1\116\14\3\1\117\1\120\2\3\1\121\1\122"+
    "\1\123\1\124\1\125\1\126\1\127\4\3\1\130\1\3"+
    "\1\131\1\3\1\132\4\3\1\133\5\3\1\134\1\135"+
    "\5\3\1\136\3\3\1\137\1\3\1\140\1\141\1\142"+
    "\1\143\1\3\1\144\1\145\1\146\1\147\1\3\1\150"+
    "\3\3\1\151";

  private static int [] zzUnpackAction() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\74\0\u0294\0\u02d0\0\u030c\0\u0348"+
    "\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528"+
    "\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\74\0\u0690\0\u06cc"+
    "\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834\0\74\0\74"+
    "\0\74\0\74\0\u0870\0\74\0\74\0\74\0\74\0\74"+
    "\0\u08ac\0\u08e8\0\74\0\u0924\0\74\0\u0960\0\u099c\0\u09d8"+
    "\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\74"+
    "\0\74\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20"+
    "\0\u0d5c\0\u0d98\0\264\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4"+
    "\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4"+
    "\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284"+
    "\0\74\0\74\0\74\0\u12c0\0\74\0\74\0\74\0\u12fc"+
    "\0\74\0\74\0\74\0\74\0\74\0\74\0\74\0\74"+
    "\0\u08ac\0\74\0\u1338\0\74\0\u1374\0\u13b0\0\u13ec\0\u1428"+
    "\0\264\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc"+
    "\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac"+
    "\0\u17e8\0\u1824\0\264\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950"+
    "\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\264"+
    "\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4"+
    "\0\u1d10\0\u1d4c\0\u1d88\0\74\0\74\0\74\0\u1dc4\0\u1e00"+
    "\0\u1e3c\0\264\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4"+
    "\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0\0\264\0\u210c\0\264"+
    "\0\u2148\0\264\0\u2184\0\264\0\u21c0\0\u21fc\0\264\0\264"+
    "\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2364\0\264\0\u23a0"+
    "\0\u23dc\0\u2418\0\u2454\0\u2490\0\264\0\u24cc\0\264\0\u2508"+
    "\0\u2544\0\264\0\264\0\264\0\264\0\264\0\u2580\0\264"+
    "\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac\0\264\0\u26e8\0\u2724"+
    "\0\u2760\0\u279c\0\u27d8\0\264\0\264\0\u2814\0\u2850\0\u288c"+
    "\0\u28c8\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c"+
    "\0\u2aa8\0\264\0\264\0\u2ae4\0\u2b20\0\u2b5c\0\264\0\264"+
    "\0\264\0\264\0\264\0\264\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c"+
    "\0\264\0\u2c88\0\264\0\u2cc4\0\264\0\u2d00\0\u2d3c\0\u2d78"+
    "\0\u2db4\0\264\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0\0\264"+
    "\0\264\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\264\0\u3048"+
    "\0\u3084\0\u30c0\0\264\0\u30fc\0\264\0\264\0\264\0\264"+
    "\0\u3138\0\264\0\264\0\264\0\264\0\u3174\0\264\0\u31b0"+
    "\0\u31ec\0\u3228\0\264";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\1\4"+
    "\1\10\1\11\1\12\1\13\2\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\4\1\24\1\25\1\4"+
    "\1\26\1\27\1\4\1\30\2\4\1\31\1\4\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\2\2"+
    "\1\14\75\0\1\3\4\0\3\62\64\0\3\4\1\0"+
    "\4\4\5\0\25\4\35\0\1\63\41\0\1\64\1\65"+
    "\5\0\1\66\17\0\3\4\1\0\1\4\1\67\2\4"+
    "\5\0\2\4\1\70\1\71\10\4\1\72\10\4\32\0"+
    "\3\4\1\0\4\4\5\0\14\4\1\73\10\4\32\0"+
    "\3\4\1\0\4\4\5\0\1\74\10\4\1\75\13\4"+
    "\42\0\1\76\1\77\34\0\1\100\73\0\1\101\40\0"+
    "\1\14\60\0\3\4\1\0\4\4\5\0\1\4\1\102"+
    "\1\4\1\103\14\4\1\104\2\4\1\105\1\4\32\0"+
    "\3\4\1\0\4\4\5\0\6\4\1\106\1\107\10\4"+
    "\1\110\4\4\32\0\3\4\1\0\1\4\1\111\1\4"+
    "\1\112\5\0\25\4\32\0\3\4\1\0\1\113\3\4"+
    "\5\0\11\4\1\114\13\4\32\0\3\4\1\0\1\4"+
    "\1\115\2\4\5\0\2\4\1\116\11\4\1\117\3\4"+
    "\1\120\4\4\32\0\3\4\1\0\1\4\1\121\2\4"+
    "\5\0\15\4\1\122\7\4\32\0\3\4\1\0\4\4"+
    "\5\0\5\4\1\123\17\4\32\0\3\4\1\0\3\4"+
    "\1\124\5\0\6\4\1\125\16\4\32\0\3\4\1\0"+
    "\3\4\1\126\5\0\5\4\1\127\6\4\1\130\10\4"+
    "\32\0\3\4\1\0\4\4\5\0\5\4\1\131\6\4"+
    "\1\132\10\4\32\0\3\4\1\0\4\4\5\0\10\4"+
    "\1\133\14\4\32\0\3\4\1\0\4\4\5\0\14\4"+
    "\1\134\10\4\32\0\3\4\1\0\4\4\5\0\6\4"+
    "\1\135\5\4\1\136\10\4\32\0\3\4\1\0\4\4"+
    "\5\0\20\4\1\137\4\4\32\0\3\4\1\0\4\4"+
    "\5\0\14\4\1\140\10\4\100\0\1\141\70\0\1\142"+
    "\2\0\1\143\72\0\1\144\1\145\73\0\1\146\73\0"+
    "\1\147\1\150\72\0\1\151\73\0\1\152\2\0\1\153"+
    "\70\0\1\154\73\0\1\155\4\0\1\156\31\0\1\157"+
    "\143\0\1\160\11\0\70\161\1\162\1\163\2\161\6\0"+
    "\3\62\75\0\1\164\136\0\1\165\17\0\3\4\1\0"+
    "\4\4\5\0\14\4\1\166\10\4\32\0\3\4\1\0"+
    "\1\4\1\167\2\4\5\0\25\4\32\0\3\4\1\0"+
    "\4\4\5\0\11\4\1\170\13\4\32\0\3\4\1\0"+
    "\4\4\5\0\6\4\1\171\16\4\32\0\3\4\1\0"+
    "\4\4\5\0\11\4\1\172\13\4\32\0\3\4\1\0"+
    "\4\4\5\0\3\4\1\173\21\4\32\0\3\4\1\0"+
    "\4\4\5\0\1\174\2\4\1\175\21\4\31\0\13\76"+
    "\1\13\1\14\57\76\12\176\1\177\61\176\1\0\3\4"+
    "\1\0\4\4\5\0\2\4\1\200\3\4\1\201\16\4"+
    "\32\0\3\4\1\0\4\4\5\0\16\4\1\202\1\203"+
    "\5\4\32\0\3\4\1\0\4\4\5\0\14\4\1\204"+
    "\10\4\32\0\3\4\1\0\4\4\5\0\3\4\1\205"+
    "\21\4\32\0\3\4\1\0\3\4\1\206\5\0\25\4"+
    "\32\0\3\4\1\0\4\4\5\0\10\4\1\207\14\4"+
    "\32\0\3\4\1\0\4\4\5\0\3\4\1\210\21\4"+
    "\32\0\3\4\1\0\4\4\5\0\3\4\1\211\21\4"+
    "\32\0\3\4\1\0\4\4\5\0\1\4\1\212\23\4"+
    "\32\0\3\4\1\0\4\4\5\0\1\4\1\213\23\4"+
    "\32\0\3\4\1\0\4\4\5\0\2\4\1\214\22\4"+
    "\32\0\3\4\1\0\4\4\5\0\1\215\24\4\32\0"+
    "\3\4\1\0\4\4\5\0\11\4\1\216\13\4\32\0"+
    "\3\4\1\0\4\4\5\0\2\4\1\217\22\4\32\0"+
    "\3\4\1\0\4\4\5\0\1\220\24\4\32\0\3\4"+
    "\1\0\4\4\5\0\1\4\1\221\6\4\1\222\14\4"+
    "\32\0\3\4\1\0\4\4\5\0\1\4\1\223\14\4"+
    "\1\224\6\4\32\0\3\4\1\0\4\4\5\0\21\4"+
    "\1\225\3\4\32\0\3\4\1\0\4\4\5\0\14\4"+
    "\1\226\10\4\32\0\3\4\1\0\1\4\1\227\2\4"+
    "\5\0\25\4\32\0\3\4\1\0\4\4\5\0\23\4"+
    "\1\230\1\4\32\0\3\4\1\0\4\4\5\0\5\4"+
    "\1\231\17\4\32\0\3\4\1\0\1\232\3\4\5\0"+
    "\4\4\1\233\20\4\32\0\3\4\1\0\3\4\1\234"+
    "\5\0\25\4\32\0\3\4\1\0\4\4\5\0\5\4"+
    "\1\235\17\4\32\0\3\4\1\0\4\4\5\0\1\4"+
    "\1\236\23\4\32\0\3\4\1\0\4\4\5\0\5\4"+
    "\1\237\17\4\32\0\3\4\1\0\4\4\5\0\14\4"+
    "\1\240\10\4\32\0\3\4\1\0\4\4\5\0\3\4"+
    "\1\241\21\4\32\0\3\4\1\0\1\4\1\242\2\4"+
    "\5\0\3\4\1\243\21\4\100\0\1\244\73\0\1\245"+
    "\24\0\13\161\2\0\55\161\57\0\1\246\17\0\3\4"+
    "\1\0\4\4\5\0\2\4\1\247\22\4\32\0\3\4"+
    "\1\0\4\4\5\0\1\250\24\4\32\0\3\4\1\0"+
    "\4\4\5\0\2\4\1\251\22\4\32\0\3\4\1\0"+
    "\4\4\5\0\16\4\1\252\6\4\32\0\3\4\1\0"+
    "\4\4\5\0\11\4\1\253\13\4\32\0\3\4\1\0"+
    "\4\4\5\0\3\4\1\254\21\4\32\0\3\4\1\0"+
    "\4\4\5\0\14\4\1\255\10\4\31\0\12\176\1\256"+
    "\61\176\11\0\1\14\1\177\62\0\3\4\1\0\4\4"+
    "\5\0\1\4\1\257\23\4\32\0\3\4\1\0\3\4"+
    "\1\260\5\0\3\4\1\261\21\4\32\0\3\4\1\0"+
    "\4\4\5\0\11\4\1\262\13\4\32\0\3\4\1\0"+
    "\4\4\5\0\5\4\1\263\17\4\32\0\3\4\1\0"+
    "\4\4\5\0\6\4\1\264\16\4\32\0\3\4\1\0"+
    "\4\4\5\0\1\4\1\265\23\4\32\0\3\4\1\0"+
    "\4\4\5\0\5\4\1\266\17\4\32\0\3\4\1\0"+
    "\4\4\5\0\5\4\1\267\17\4\32\0\3\4\1\0"+
    "\4\4\5\0\1\270\24\4\32\0\3\4\1\0\4\4"+
    "\5\0\16\4\1\271\6\4\32\0\3\4\1\0\4\4"+
    "\5\0\14\4\1\272\10\4\32\0\3\4\1\0\4\4"+
    "\5\0\1\273\24\4\32\0\3\4\1\0\4\4\5\0"+
    "\5\4\1\274\17\4\32\0\3\4\1\0\4\4\5\0"+
    "\1\275\1\276\23\4\32\0\3\4\1\0\4\4\5\0"+
    "\6\4\1\277\16\4\32\0\3\4\1\0\4\4\5\0"+
    "\5\4\1\300\17\4\32\0\3\4\1\0\4\4\5\0"+
    "\5\4\1\301\17\4\32\0\3\4\1\0\1\4\1\302"+
    "\2\4\5\0\25\4\32\0\3\4\1\0\3\4\1\303"+
    "\5\0\25\4\32\0\3\4\1\0\4\4\5\0\3\4"+
    "\1\304\21\4\32\0\3\4\1\0\1\4\1\305\2\4"+
    "\5\0\25\4\32\0\3\4\1\0\4\4\5\0\1\4"+
    "\1\306\23\4\32\0\3\4\1\0\1\4\1\307\2\4"+
    "\5\0\25\4\32\0\3\4\1\0\4\4\5\0\15\4"+
    "\1\310\7\4\32\0\3\4\1\0\4\4\5\0\2\4"+
    "\1\311\22\4\32\0\3\4\1\0\1\4\1\312\2\4"+
    "\5\0\25\4\32\0\3\4\1\0\4\4\5\0\21\4"+
    "\1\313\3\4\32\0\3\4\1\0\4\4\5\0\6\4"+
    "\1\314\16\4\32\0\3\4\1\0\4\4\5\0\14\4"+
    "\1\315\10\4\32\0\3\4\1\0\4\4\5\0\2\4"+
    "\1\316\22\4\32\0\3\4\1\0\1\4\1\317\2\4"+
    "\5\0\25\4\32\0\3\4\1\0\1\4\1\320\2\4"+
    "\5\0\25\4\32\0\3\4\1\0\4\4\5\0\2\4"+
    "\1\321\22\4\32\0\3\4\1\0\4\4\5\0\13\4"+
    "\1\322\11\4\32\0\3\4\1\0\4\4\5\0\1\4"+
    "\1\323\23\4\32\0\3\4\1\0\4\4\5\0\5\4"+
    "\1\324\17\4\32\0\3\4\1\0\1\4\1\325\2\4"+
    "\5\0\25\4\32\0\3\4\1\0\4\4\5\0\16\4"+
    "\1\326\6\4\32\0\3\4\1\0\4\4\5\0\16\4"+
    "\1\327\6\4\32\0\3\4\1\0\4\4\5\0\11\4"+
    "\1\330\13\4\31\0\11\176\1\14\1\256\61\176\1\0"+
    "\3\4\1\0\4\4\5\0\3\4\1\331\21\4\32\0"+
    "\3\4\1\0\4\4\5\0\4\4\1\332\20\4\32\0"+
    "\3\4\1\0\4\4\5\0\11\4\1\333\13\4\32\0"+
    "\3\4\1\0\4\4\5\0\5\4\1\334\17\4\32\0"+
    "\3\4\1\0\4\4\5\0\14\4\1\335\10\4\32\0"+
    "\3\4\1\0\4\4\5\0\1\4\1\336\23\4\32\0"+
    "\3\4\1\0\4\4\5\0\4\4\1\337\20\4\32\0"+
    "\3\4\1\0\4\4\5\0\3\4\1\340\5\4\1\341"+
    "\1\4\1\342\11\4\32\0\3\4\1\0\4\4\5\0"+
    "\11\4\1\343\13\4\32\0\3\4\1\0\4\4\5\0"+
    "\1\344\24\4\32\0\3\4\1\0\4\4\5\0\1\4"+
    "\1\345\23\4\32\0\3\4\1\0\4\4\5\0\3\4"+
    "\1\346\21\4\32\0\3\4\1\0\4\4\5\0\6\4"+
    "\1\347\16\4\32\0\3\4\1\0\4\4\5\0\3\4"+
    "\1\350\21\4\32\0\3\4\1\0\4\4\5\0\6\4"+
    "\1\351\16\4\32\0\3\4\1\0\4\4\5\0\1\352"+
    "\24\4\32\0\3\4\1\0\4\4\5\0\3\4\1\353"+
    "\21\4\32\0\3\4\1\0\4\4\5\0\5\4\1\354"+
    "\17\4\32\0\3\4\1\0\4\4\5\0\4\4\1\355"+
    "\20\4\32\0\3\4\1\0\3\4\1\356\5\0\25\4"+
    "\32\0\3\4\1\0\4\4\5\0\1\4\1\357\23\4"+
    "\32\0\3\4\1\0\1\4\1\360\2\4\5\0\25\4"+
    "\32\0\3\4\1\0\4\4\5\0\2\4\1\361\22\4"+
    "\32\0\3\4\1\0\4\4\5\0\22\4\1\362\2\4"+
    "\32\0\3\4\1\0\4\4\5\0\5\4\1\363\17\4"+
    "\32\0\3\4\1\0\4\4\5\0\1\4\1\364\23\4"+
    "\32\0\3\4\1\0\4\4\5\0\11\4\1\365\13\4"+
    "\32\0\3\4\1\0\4\4\5\0\4\4\1\366\20\4"+
    "\32\0\3\4\1\0\4\4\5\0\1\4\1\367\23\4"+
    "\32\0\3\4\1\0\4\4\5\0\16\4\1\370\6\4"+
    "\32\0\3\4\1\0\4\4\5\0\13\4\1\371\11\4"+
    "\32\0\3\4\1\0\1\372\3\4\5\0\25\4\32\0"+
    "\3\4\1\0\4\4\5\0\20\4\1\373\4\4\32\0"+
    "\3\4\1\0\4\4\5\0\13\4\1\374\11\4\32\0"+
    "\3\4\1\0\4\4\5\0\2\4\1\375\22\4\32\0"+
    "\3\4\1\0\4\4\5\0\5\4\1\376\17\4\32\0"+
    "\3\4\1\0\4\4\5\0\2\4\1\377\22\4\32\0"+
    "\3\4\1\0\4\4\5\0\11\4\1\u0100\13\4\32\0"+
    "\3\4\1\0\4\4\5\0\11\4\1\u0101\13\4\32\0"+
    "\3\4\1\0\4\4\5\0\4\4\1\u0102\20\4\32\0"+
    "\3\4\1\0\4\4\5\0\11\4\1\u0103\13\4\32\0"+
    "\3\4\1\0\4\4\5\0\1\4\1\u0104\23\4\32\0"+
    "\3\4\1\0\4\4\5\0\4\4\1\u0105\20\4\32\0"+
    "\3\4\1\0\4\4\5\0\4\4\1\u0106\20\4\32\0"+
    "\3\4\1\0\4\4\5\0\5\4\1\u0107\17\4\32\0"+
    "\3\4\1\0\1\4\1\u0108\2\4\5\0\25\4\32\0"+
    "\3\4\1\0\4\4\5\0\7\4\1\u0109\15\4\32\0"+
    "\3\4\1\0\4\4\5\0\5\4\1\u010a\17\4\32\0"+
    "\3\4\1\0\4\4\5\0\1\4\1\u010b\23\4\32\0"+
    "\3\4\1\0\4\4\5\0\3\4\1\u010c\21\4\32\0"+
    "\3\4\1\0\4\4\5\0\5\4\1\u010d\17\4\32\0"+
    "\1\4\1\u010e\1\4\1\0\4\4\5\0\25\4\32\0"+
    "\3\4\1\0\4\4\5\0\12\4\1\u010f\12\4\32\0"+
    "\3\4\1\0\1\u0110\3\4\5\0\25\4\32\0\3\4"+
    "\1\0\4\4\5\0\1\u0111\24\4\32\0\3\4\1\0"+
    "\3\4\1\u0112\5\0\25\4\32\0\3\4\1\0\4\4"+
    "\5\0\3\4\1\u0113\21\4\32\0\3\4\1\0\4\4"+
    "\5\0\5\4\1\u0114\17\4\32\0\3\4\1\0\4\4"+
    "\5\0\1\4\1\u0115\23\4\32\0\3\4\1\0\4\4"+
    "\5\0\10\4\1\u0116\14\4\32\0\3\4\1\0\4\4"+
    "\5\0\1\4\1\u0117\23\4\32\0\3\4\1\0\4\4"+
    "\5\0\10\4\1\u0118\14\4\32\0\3\4\1\0\4\4"+
    "\5\0\14\4\1\u0119\10\4\32\0\3\4\1\0\1\4"+
    "\1\u011a\2\4\5\0\25\4\32\0\3\4\1\0\4\4"+
    "\5\0\13\4\1\u011b\11\4\32\0\3\4\1\0\4\4"+
    "\5\0\2\4\1\u011c\22\4\32\0\3\4\1\0\4\4"+
    "\5\0\5\4\1\u011d\17\4\32\0\3\4\1\0\4\4"+
    "\5\0\5\4\1\u011e\17\4\32\0\3\4\1\0\4\4"+
    "\5\0\1\4\1\u011f\23\4\32\0\3\4\1\0\4\4"+
    "\5\0\6\4\1\u0120\16\4\32\0\3\4\1\0\4\4"+
    "\5\0\5\4\1\u0121\17\4\32\0\3\4\1\0\4\4"+
    "\5\0\1\4\1\u0122\23\4\32\0\3\4\1\0\4\4"+
    "\5\0\5\4\1\u0123\17\4\32\0\3\4\1\0\4\4"+
    "\5\0\6\4\1\u0124\16\4\32\0\3\4\1\0\4\4"+
    "\5\0\5\4\1\u0125\17\4\32\0\3\4\1\0\4\4"+
    "\5\0\1\u0126\24\4\32\0\3\4\1\0\4\4\5\0"+
    "\13\4\1\u0127\11\4\32\0\3\4\1\0\4\4\5\0"+
    "\1\u0128\24\4\32\0\3\4\1\0\4\4\5\0\5\4"+
    "\1\u0129\17\4\32\0\3\4\1\0\4\4\5\0\6\4"+
    "\1\u012a\16\4\32\0\3\4\1\0\4\4\5\0\1\4"+
    "\1\u012b\23\4\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12900];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\11\1\1\11\21\1\1\11\10\1\4\11"+
    "\1\1\5\11\2\1\1\11\1\1\1\11\1\0\10\1"+
    "\1\0\2\11\37\1\3\11\1\1\3\11\1\1\10\11"+
    "\1\0\1\11\1\0\1\11\1\0\10\1\2\0\44\1"+
    "\3\11\7\1\1\0\175\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  public static String curLine;

  /**
   * Factory method for creating Symbols for a given type.
   * @param type The type of this symbol
   * @return A symbol of a specific type
   */
  public Symbol symbol(int type) {
      curLine = "line :" + yyline;
      return new Symbol(type, yyline, yycolumn);
  }
  
  /**
   * Factory method for creating Symbols for a given type and its value.
   * @param type The type of this symbol
   * @param value The value of this symbol
   * @return A symbol of a specific type
   */
  public Symbol symbol(int type, Object value) {
      curLine = "line :" + yyline;
      return new Symbol(type, yyline, yycolumn, value);
  }
  
  /**
   * Reports an error occured in a given line.
   * @param line The bad line
   * @param msg Additional information about the error
   */
  private void reportError(int line, String msg) {
      throw new RuntimeException("Lexical error at line #" + line + ": " + msg);
  }

  public String current_lexeme(){
      int l = yyline+1;
      int c = yycolumn+1;
      return "line: " + l + ", column: " + c + ", with : '"+yytext()+"')";
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { reportError(yyline+1, "Illegal character \"" + yytext() + "\"");
          }
        case 106: break;
        case 2: 
          { return symbol(sym.INTEGER, new String(yytext()));
          }
        case 107: break;
        case 3: 
          { return symbol(sym.IDENTIFIER, new String(yytext()));
          }
        case 108: break;
        case 4: 
          { return symbol(sym.MINUSOP);
          }
        case 109: break;
        case 5: 
          { return symbol(sym.DIVOP);
          }
        case 110: break;
        case 6: 
          { return symbol(sym.STAR);
          }
        case 111: break;
        case 7: 
          { /* skip it */
          }
        case 112: break;
        case 8: 
          { return symbol(sym.LOGNEGATION);
          }
        case 113: break;
        case 9: 
          { return symbol(sym.PLUSOP);
          }
        case 114: break;
        case 10: 
          { return symbol(sym.BINNEG);
          }
        case 115: break;
        case 11: 
          { return symbol(sym.GT, new String(yytext()));
          }
        case 116: break;
        case 12: 
          { return symbol(sym.ASSIGNMENT, new String(yytext()));
          }
        case 117: break;
        case 13: 
          { return symbol(sym.LT, new String(yytext()));
          }
        case 118: break;
        case 14: 
          { return symbol(sym.MODOP);
          }
        case 119: break;
        case 15: 
          { return symbol(sym.SINGLEAND);
          }
        case 120: break;
        case 16: 
          { return symbol(sym.XOROP, new String(yytext()));
          }
        case 121: break;
        case 17: 
          { return symbol(sym.SOROP, new String(yytext()));
          }
        case 122: break;
        case 18: 
          { return symbol(sym.DOT, new String(yytext()));
          }
        case 123: break;
        case 19: 
          { return symbol(sym.SEMICOLON, new String(yytext()));
          }
        case 124: break;
        case 20: 
          { return symbol(sym.QUESTION);
          }
        case 125: break;
        case 21: 
          { return symbol(sym.LSQRBRK);
          }
        case 126: break;
        case 22: 
          { return symbol(sym.RSQRBRK);
          }
        case 127: break;
        case 23: 
          { return symbol(sym.COLON);
          }
        case 128: break;
        case 24: 
          { return symbol(sym.COMMA);
          }
        case 129: break;
        case 25: 
          { return symbol(sym.RBRK, new String(yytext()));
          }
        case 130: break;
        case 26: 
          { return symbol(sym.LBRK, new String(yytext()));
          }
        case 131: break;
        case 27: 
          { return symbol(sym.LPAR, new String(yytext()));
          }
        case 132: break;
        case 28: 
          { return symbol(sym.RPAR, new String(yytext()));
          }
        case 133: break;
        case 29: 
          { return symbol(sym.AUTODECRM);
          }
        case 134: break;
        case 30: 
          { return symbol(sym.ARROW);
          }
        case 135: break;
        case 31: 
          { return symbol(sym.MINUSASSIGN, new String(yytext()));
          }
        case 136: break;
        case 32: 
          { return symbol(sym.DIVASSIGN);
          }
        case 137: break;
        case 33: 
          { return symbol(sym.MULTASSIGN);
          }
        case 138: break;
        case 34: 
          { return symbol(sym.IF, new String(yytext()));
          }
        case 139: break;
        case 35: 
          { return symbol(sym.DO, new String(yytext()));
          }
        case 140: break;
        case 36: 
          { return symbol(sym.NEQOP, new String(yytext()));
          }
        case 141: break;
        case 37: 
          { return symbol(sym.AUTOINCRM);
          }
        case 142: break;
        case 38: 
          { return symbol(sym.PLUSASSIGN, new String(yytext()));
          }
        case 143: break;
        case 39: 
          { return symbol(sym.RSHIFT);
          }
        case 144: break;
        case 40: 
          { return symbol(sym.GTE, new String(yytext()));
          }
        case 145: break;
        case 41: 
          { return symbol(sym.EQOP, new String(yytext()));
          }
        case 146: break;
        case 42: 
          { return symbol(sym.LTE, new String(yytext()));
          }
        case 147: break;
        case 43: 
          { return symbol(sym.LSHIFT);
          }
        case 148: break;
        case 44: 
          { return symbol(sym.MODASSIGN);
          }
        case 149: break;
        case 45: 
          { return symbol(sym.ANDASSIGN);
          }
        case 150: break;
        case 46: 
          { return symbol(sym.DOUBLEAND);
          }
        case 151: break;
        case 47: 
          { return symbol(sym.XORASSIGN);
          }
        case 152: break;
        case 48: 
          { return symbol(sym.ORASSIGN);
          }
        case 153: break;
        case 49: 
          { return symbol(sym.OROP, new String(yytext()));
          }
        case 154: break;
        case 50: 
          { return symbol(sym.DOTSTAR);
          }
        case 155: break;
        case 51: 
          { return symbol(sym.SEPPTR);
          }
        case 156: break;
        case 52: 
          { return symbol(sym.STRING_LITERAL, new String(yytext()));
          }
        case 157: break;
        case 53: 
          { return symbol(sym.ARROWSTAR);
          }
        case 158: break;
        case 54: 
          { return symbol(sym.FOR, new String(yytext()));
          }
        case 159: break;
        case 55: 
          { return symbol(sym.INT, new String(yytext()));
          }
        case 160: break;
        case 56: 
          { return symbol(sym.NEW, new String(yytext()) );
          }
        case 161: break;
        case 57: 
          { return symbol(sym.RSHIFTASSIGN, new String(yytext()));
          }
        case 162: break;
        case 58: 
          { return symbol(sym.LSHIFTASSIGN, new String(yytext()));
          }
        case 163: break;
        case 59: 
          { return symbol(sym.DOTS);
          }
        case 164: break;
        case 60: 
          { return symbol(sym.LONG, new String(yytext()));
          }
        case 165: break;
        case 61: 
          { return symbol(sym.TRUE, new String(yytext()));
          }
        case 166: break;
        case 62: 
          { return symbol(sym.THIS);
          }
        case 167: break;
        case 63: 
          { return symbol(sym.AUTO, new String(yytext()));
          }
        case 168: break;
        case 64: 
          { return symbol(sym.CASE, new String(yytext()));
          }
        case 169: break;
        case 65: 
          { return symbol(sym.CHAR, new String(yytext()));
          }
        case 170: break;
        case 66: 
          { return symbol(sym.ELSE, new String(yytext()));
          }
        case 171: break;
        case 67: 
          { return symbol(sym.NULLPTR);
          }
        case 172: break;
        case 68: 
          { return symbol(sym.GOTO, new String(yytext()));
          }
        case 173: break;
        case 69: 
          { return symbol(sym.BOOL, new String(yytext()));
          }
        case 174: break;
        case 70: 
          { return symbol(sym.VOID, new String(yytext()));
          }
        case 175: break;
        case 71: 
          { return symbol(sym.FLOAT, new String(yytext()));
          }
        case 176: break;
        case 72: 
          { return symbol(sym.FALSE, new String(yytext()));
          }
        case 177: break;
        case 73: 
          { return symbol(sym.FINAL);
          }
        case 178: break;
        case 74: 
          { return symbol(sym.USING);
          }
        case 179: break;
        case 75: 
          { return symbol(sym.UNION);
          }
        case 180: break;
        case 76: 
          { return symbol(sym.SHORT, new String(yytext()));
          }
        case 181: break;
        case 77: 
          { return symbol(sym.CLASS);
          }
        case 182: break;
        case 78: 
          { return symbol(sym.CONST);
          }
        case 183: break;
        case 79: 
          { return symbol(sym.BREAK, new String(yytext()));
          }
        case 184: break;
        case 80: 
          { return symbol(sym.WHILE, new String(yytext()));
          }
        case 185: break;
        case 81: 
          { return symbol(sym.STATIC, new String(yytext()));
          }
        case 186: break;
        case 82: 
          { return symbol(sym.STRUCT);
          }
        case 187: break;
        case 83: 
          { return symbol(sym.STRING, new String(yytext()) );
          }
        case 188: break;
        case 84: 
          { return symbol(sym.SIGNED, new String(yytext()));
          }
        case 189: break;
        case 85: 
          { return symbol(sym.SIZEOF);
          }
        case 190: break;
        case 86: 
          { return symbol(sym.SWITCH, new String(yytext()));
          }
        case 191: break;
        case 87: 
          { return symbol(sym.TYPEID);
          }
        case 192: break;
        case 88: 
          { return symbol(sym.EXTERN);
          }
        case 193: break;
        case 89: 
          { return symbol(sym.RETURN, new String(yytext()));
          }
        case 194: break;
        case 90: 
          { return symbol(sym.PUBLIC);
          }
        case 195: break;
        case 91: 
          { return symbol(sym.DOUBLE, new String(yytext()));
          }
        case 196: break;
        case 92: 
          { return symbol(sym.TYPEDEF, new String(yytext()));
          }
        case 197: break;
        case 93: 
          { return symbol(sym.ALIGNAS);
          }
        case 198: break;
        case 94: 
          { return symbol(sym.DEFAULT);
          }
        case 199: break;
        case 95: 
          { return symbol(sym.UNSIGNED, new String(yytext()));
          }
        case 200: break;
        case 96: 
          { return symbol(sym.TYPENAME);
          }
        case 201: break;
        case 97: 
          { return symbol(sym.CONTINUE, new String(yytext()));
          }
        case 202: break;
        case 98: 
          { return symbol(sym.EXPLICIT);
          }
        case 203: break;
        case 99: 
          { return symbol(sym.REGISTER, new String(yytext()));
          }
        case 204: break;
        case 100: 
          { return symbol(sym.NOEXCEPT);
          }
        case 205: break;
        case 101: 
          { return symbol(sym.DECLTYPE);
          }
        case 206: break;
        case 102: 
          { return symbol(sym.OPERATOR, new String(yytext()));
          }
        case 207: break;
        case 103: 
          { return symbol(sym.VOLATILE);
          }
        case 208: break;
        case 104: 
          { return symbol(sym.PROTECTED);
          }
        case 209: break;
        case 105: 
          { return symbol(sym.STATIC_ASSERT);
          }
        case 210: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
