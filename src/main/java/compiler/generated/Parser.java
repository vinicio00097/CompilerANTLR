
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 25 02:38:03 CST 2019
//----------------------------------------------------

package compiler.generated;

import java_cup.runtime.*;
import util.*;
import core.*;
import java.util.ArrayList;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 25 02:38:03 CST 2019
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u017f\000\002\002\004\000\002\117\003\000\002\173" +
    "\003\000\002\173\002\000\002\174\003\000\002\174\004" +
    "\000\002\175\003\000\002\175\003\000\002\175\003\000" +
    "\002\175\003\000\002\175\003\000\002\164\004\000\002" +
    "\157\007\000\002\157\005\000\002\201\003\000\002\201" +
    "\002\000\002\260\002\000\002\012\006\000\002\014\003" +
    "\000\002\014\002\000\002\202\003\000\002\202\004\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\206" +
    "\003\000\002\206\003\000\002\206\003\000\002\206\003" +
    "\000\002\207\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\211\003\000\002\211\003\000\002" +
    "\211\003\000\002\213\003\000\002\214\003\000\002\151" +
    "\003\000\002\151\003\000\002\151\003\000\002\151\003" +
    "\000\002\210\003\000\002\210\002\000\002\212\003\000" +
    "\002\212\002\000\002\044\005\000\002\044\005\000\002" +
    "\044\006\000\002\057\005\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\013\005\000\002\013" +
    "\003\000\002\203\004\000\002\203\006\000\002\204\006" +
    "\000\002\204\004\000\002\160\003\000\002\160\003\000" +
    "\002\015\003\000\002\015\005\000\002\031\003\000\002" +
    "\031\004\000\002\156\003\000\002\156\004\000\002\156" +
    "\007\000\002\156\006\000\002\156\005\000\002\205\003" +
    "\000\002\205\004\000\002\205\006\000\002\205\005\000" +
    "\002\205\004\000\002\205\003\000\002\120\003\000\002" +
    "\120\003\000\002\165\004\000\002\165\005\000\002\007" +
    "\003\000\002\007\002\000\002\244\003\000\002\244\005" +
    "\000\002\245\003\000\002\245\005\000\002\246\003\000" +
    "\002\246\002\000\002\247\003\000\002\247\005\000\002" +
    "\250\004\000\002\250\003\000\002\121\007\000\002\177" +
    "\004\000\002\051\003\000\002\051\002\000\002\052\003" +
    "\000\002\052\005\000\002\052\004\000\002\052\003\000" +
    "\002\163\004\000\002\163\005\000\002\114\003\000\002" +
    "\114\005\000\002\216\003\000\002\216\002\000\002\217" +
    "\003\000\002\217\005\000\002\220\004\000\002\220\006" +
    "\000\002\220\004\000\002\220\006\000\002\042\003\000" +
    "\002\042\002\000\002\125\003\000\002\125\005\000\002" +
    "\054\003\000\002\004\003\000\002\004\007\000\002\105" +
    "\003\000\002\105\002\000\002\126\003\000\002\126\005" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\127\003\000\002\127\003" +
    "\000\002\102\006\000\002\102\004\000\002\104\003\000" +
    "\002\104\005\000\002\103\003\000\002\103\002\000\002" +
    "\124\003\000\002\124\005\000\002\131\003\000\002\131" +
    "\005\000\002\016\003\000\002\016\005\000\002\017\003" +
    "\000\002\017\005\000\002\020\003\000\002\020\005\000" +
    "\002\021\003\000\002\021\005\000\002\021\005\000\002" +
    "\022\003\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\023\003\000\002\023\005" +
    "\000\002\023\005\000\002\046\003\000\002\046\005\000" +
    "\002\046\005\000\002\122\003\000\002\122\005\000\002" +
    "\122\005\000\002\122\005\000\002\171\003\000\002\171" +
    "\005\000\002\171\005\000\002\063\003\000\002\063\006" +
    "\000\002\055\003\000\002\055\004\000\002\055\004\000" +
    "\002\055\004\000\002\055\004\000\002\055\006\000\002" +
    "\055\007\000\002\055\006\000\002\055\003\000\002\055" +
    "\003\000\002\107\003\000\002\107\003\000\002\107\003" +
    "\000\002\107\003\000\002\107\003\000\002\107\003\000" +
    "\002\106\003\000\002\106\006\000\002\106\006\000\002" +
    "\106\005\000\002\106\006\000\002\106\006\000\002\106" +
    "\006\000\002\106\004\000\002\106\004\000\002\106\005" +
    "\000\002\106\005\000\002\106\005\000\002\106\004\000" +
    "\002\106\004\000\002\110\003\000\002\110\003\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\047" +
    "\004\000\002\235\004\000\002\236\004\000\002\237\004" +
    "\000\002\005\003\000\002\005\003\000\002\005\005\000" +
    "\002\005\003\000\002\172\005\000\002\036\004\000\002" +
    "\036\005\000\002\221\003\000\002\221\002\000\002\222" +
    "\003\000\002\222\004\000\002\223\003\000\002\223\003" +
    "\000\002\223\003\000\002\223\003\000\002\223\003\000" +
    "\002\223\003\000\002\223\003\000\002\223\003\000\002" +
    "\231\005\000\002\231\006\000\002\231\005\000\002\233" +
    "\003\000\002\233\004\000\002\261\002\000\002\262\002" +
    "\000\002\225\012\000\002\263\002\000\002\255\005\000" +
    "\002\255\002\000\002\242\003\000\002\242\006\000\002" +
    "\242\005\000\002\243\003\000\002\243\002\000\002\226" +
    "\007\000\002\226\011\000\002\226\012\000\002\226\011" +
    "\000\002\254\004\000\002\253\004\000\002\251\003\000" +
    "\002\251\003\000\002\227\004\000\002\227\004\000\002" +
    "\227\004\000\002\227\005\000\002\227\005\000\002\100" +
    "\003\000\002\100\003\000\002\100\003\000\002\100\003" +
    "\000\002\100\003\000\002\100\003\000\002\100\003\000" +
    "\002\123\003\000\002\056\003\000\002\056\003\000\002" +
    "\045\003\000\002\116\003\000\002\155\003\000\002\155" +
    "\002\000\002\147\003\000\002\147\002\000\002\002\003" +
    "\000\002\002\002\000\002\003\004\000\002\003\006\000" +
    "\002\027\003\000\002\027\002\000\002\170\003\000\002" +
    "\170\003\000\002\146\003\000\002\146\004\000\002\043" +
    "\003\000\002\043\003\000\002\040\005\000\002\041\004" +
    "\000\002\041\004\000\002\167\003\000\002\167\004\000" +
    "\002\062\003\000\002\062\002\000\002\162\005\000\002" +
    "\162\004\000\002\162\004\000\002\162\007\000\002\162" +
    "\006\000\002\050\004\000\002\111\003\000\002\111\002" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\153\006\000\002\153\007\000\002\151\003\000\002" +
    "\151\003\000\002\151\003\000\002\151\003\000\002\152" +
    "\006\000\002\154\003\000\002\154\002\000\002\145\005" +
    "\000\002\075\004\000\002\074\003\000\002\074\003\000" +
    "\002\074\003\000\002\025\003\000\002\025\002\000\002" +
    "\026\003\000\002\026\004\000\002\166\003\000\002\166" +
    "\003\000\002\140\003\000\002\140\002\000\002\137\003" +
    "\000\002\137\003\000\002\137\003\000\002\134\006\000" +
    "\002\134\004\000\002\134\005\000\002\134\003\000\002" +
    "\134\003\000\002\135\003\000\002\136\006\000\002\112" +
    "\003\000\002\112\002\000\002\113\003\000\002\113\004" +
    "\000\002\141\007\000\002\141\003\000\002\142\004\000" +
    "\002\142\006\000\002\142\003\000\002\142\005\000\002" +
    "\006\003\000\002\006\002\000\002\072\004\000\002\066" +
    "\003\000\002\066\002\000\002\065\003\000\002\065\003" +
    "\000\002\070\006\000\002\067\005\000\002\071\003\000" +
    "\002\071\004\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\003\000\002\143\007\000\002\176" +
    "\003\000\002\144\003\000\002\144\002\000\002\234\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u022b\000\100\004\025\007\014\011\027\015\033\017" +
    "\010\020\067\045\032\047\031\050\076\051\052\053\044" +
    "\060\077\063\023\075\037\107\034\115\045\121\070\122" +
    "\043\125\011\130\015\132\060\136\020\137\030\140\065" +
    "\141\022\143\006\144\056\145\024\147\042\150\046\154" +
    "\uffd3\001\ufffe\000\100\004\025\007\014\011\027\015\033" +
    "\017\010\020\067\045\032\047\031\050\076\051\052\053" +
    "\044\060\077\063\023\075\037\107\034\115\045\121\070" +
    "\122\043\125\011\130\015\132\060\136\020\137\030\140" +
    "\065\141\022\143\006\144\056\145\024\147\042\150\046" +
    "\154\uffd3\001\uffff\000\002\001\uffd7\000\002\001\uffc9\000" +
    "\002\001\ufff9\000\002\001\ufed4\000\002\001\uffcc\000\006" +
    "\115\045\154\264\001\002\000\002\001\ufffb\000\004\154" +
    "\u0227\001\002\000\002\001\uffc3\000\002\001\uffd6\000\002" +
    "\001\uffd5\000\002\001\uffc8\000\002\001\ufe9b\000\002\001" +
    "\uffe4\000\002\001\uffd4\000\002\001\uffe3\000\002\001\ufe86" +
    "\000\002\001\uffa8\000\004\011\u0205\001\002\000\002\001" +
    "\uffca\000\002\001\ufeb5\000\004\043\u0201\001\002\000\004" +
    "\120\172\001\uffe2\000\002\001\uffe7\000\002\001\uffe0\000" +
    "\002\001\000\000\002\001\uffe8\000\002\001\ufff7\000\004" +
    "\002\u01fa\001\002\000\002\001\uffc5\000\004\005\uffc1\001" +
    "\uffe5\000\002\001\uffe1\000\004\043\u01f7\001\002\000\002" +
    "\001\uffc2\000\002\001\uffea\000\002\001\uffe9\000\002\001" +
    "\uffc0\000\002\001\ufeb3\000\002\001\uffa7\000\002\001\uffd8" +
    "\000\032\004\130\021\145\022\153\043\161\046\150\055" +
    "\140\062\134\063\147\105\135\115\045\152\142\154\136" +
    "\001\002\000\002\001\uffc6\000\002\001\uffeb\000\002\001" +
    "\uffc4\000\002\001\ufffa\000\002\001\ufff8\000\002\001\uffdf" +
    "\000\002\001\ufe9e\000\002\001\uffc7\000\002\001\uffde\000" +
    "\002\001\ufed3\000\002\001\uffcb\000\004\005\122\001\002" +
    "\000\004\005\114\001\002\000\006\011\027\045\032\001" +
    "\002\000\002\001\ufffd\000\010\004\100\011\027\045\032" +
    "\001\002\000\002\001\ufeb4\000\002\001\uffe6\000\002\001" +
    "\ufff6\000\002\001\ufe9d\000\006\011\027\045\032\001\ufea0" +
    "\000\002\001\002\000\006\052\107\053\112\001\ufeb1\000" +
    "\002\001\ufeb7\000\002\001\ufeb6\000\002\001\ufeae\000\006" +
    "\052\107\053\112\001\ufeb2\000\002\001\ufeb0\000\002\001" +
    "\ufead\000\002\001\ufeaf\000\002\001\002\000\004\006\121" +
    "\001\002\000\004\054\117\001\002\000\004\006\120\001" +
    "\002\000\002\001\ufebf\000\002\001\ufec0\000\002\001\ufeb8" +
    "\000\004\006\125\001\002\000\002\001\ufeb9\000\002\001" +
    "\ufeba\000\002\001\uffdb\000\006\011\170\043\166\001\uffb5" +
    "\000\002\001\uffa6\000\002\001\uffb7\000\004\055\uffdd\001" +
    "\uffa9\000\030\021\145\022\153\043\161\046\150\055\140" +
    "\062\134\063\147\105\135\115\045\152\142\154\136\001" +
    "\002\000\006\011\027\045\032\001\ufe9f\000\004\154\u0127" +
    "\001\002\000\004\055\uffda\001\uff25\000\002\001\uff27\000" +
    "\004\055\u01ee\001\002\000\004\055\u01ec\001\002\000\052" +
    "\017\010\020\067\047\031\050\076\051\052\063\023\115" +
    "\045\121\070\122\233\125\011\130\015\132\060\136\020" +
    "\137\030\140\065\143\006\144\056\147\042\150\046\153" +
    "\u01e9\001\uffd3\000\002\001\uffa2\000\010\005\ufff1\010\u016e" +
    "\055\ufff1\001\uffa0\000\006\011\027\045\032\001\ufe9f\000" +
    "\002\001\uff24\000\006\115\045\154\264\001\002\000\010" +
    "\105\135\152\142\154\252\001\002\000\002\001\uff26\000" +
    "\002\001\uffdc\000\006\011\027\045\032\001\ufe9f\000\006" +
    "\004\u016b\054\u016a\001\002\000\004\055\u0153\001\002\000" +
    "\002\001\uffae\000\006\021\272\154\u0169\001\002\000\002" +
    "\001\uffb3\000\030\021\145\022\153\043\161\046\150\055" +
    "\140\062\134\063\147\105\135\115\045\152\142\154\136" +
    "\001\002\000\002\001\uff23\000\006\011\170\043\166\001" +
    "\uffb5\000\004\044\165\001\002\000\002\001\uffaf\000\070" +
    "\015\u0149\017\010\020\067\044\u0148\047\031\050\076\051" +
    "\052\053\044\060\077\063\023\075\037\107\034\115\045" +
    "\121\070\122\043\125\011\130\015\132\060\136\020\137" +
    "\030\140\065\141\022\143\006\144\056\145\024\147\042" +
    "\150\046\001\uffd3\000\002\001\uffb2\000\106\012\214\021" +
    "\240\043\245\062\203\063\023\076\176\077\175\100\251" +
    "\101\173\102\236\103\206\104\216\105\244\110\220\111" +
    "\247\115\045\117\177\120\172\121\070\122\233\125\011" +
    "\130\015\132\060\136\020\137\030\140\065\143\006\144" +
    "\056\147\042\150\046\152\142\154\252\155\227\156\246" +
    "\001\002\000\002\001\ufeed\000\002\001\ufee3\000\104\021" +
    "\240\043\245\062\203\063\023\076\176\077\175\100\251" +
    "\101\173\102\236\103\206\104\216\105\244\110\220\111" +
    "\247\115\045\117\177\120\172\121\070\122\233\125\011" +
    "\130\015\132\060\136\020\137\030\140\065\143\006\144" +
    "\056\147\042\150\046\152\142\154\252\155\227\156\246" +
    "\001\002\000\002\001\uff47\000\002\001\uff39\000\002\001" +
    "\uff38\000\002\001\ufee7\000\006\005\u010e\043\u011a\001\002" +
    "\000\002\001\uff1e\000\002\001\ufee9\000\002\001\uff3b\000" +
    "\002\001\ufeea\000\002\001\uff4e\000\106\021\240\043\u0140" +
    "\046\u013f\062\203\063\023\076\176\077\175\100\251\101" +
    "\173\102\236\103\206\104\216\105\244\110\220\111\247" +
    "\115\045\117\177\120\172\121\070\122\233\125\011\130" +
    "\015\132\060\136\020\137\030\140\065\143\006\144\056" +
    "\147\042\150\046\152\142\154\252\155\227\156\246\001" +
    "\002\000\002\001\uff80\000\004\021\u0100\001\uff60\000\104" +
    "\021\240\043\245\062\203\063\023\076\176\077\175\100" +
    "\251\101\173\102\236\103\206\104\216\105\244\110\220" +
    "\111\247\115\045\117\177\120\172\121\070\122\233\125" +
    "\011\130\015\132\060\136\020\137\030\140\065\143\006" +
    "\144\056\147\042\150\046\152\142\154\252\155\227\156" +
    "\246\001\002\000\016\011\u0130\016\u012f\041\u0131\043\u012d" +
    "\101\u012e\102\u012c\001\uff45\000\004\066\376\001\uff62\000" +
    "\006\011\027\045\032\001\ufe9f\000\002\001\uff3c\000\002" +
    "\001\uff37\000\004\012\u0129\001\002\000\002\001\uff1d\000" +
    "\012\014\u0106\026\u0105\027\u0107\040\u0108\001\uff5c\000\004" +
    "\065\374\001\uff64\000\002\001\uff35\000\002\001\uff3d\000" +
    "\002\001\uff1b\000\010\062\327\071\331\072\330\001\uff51" +
    "\000\002\001\ufee6\000\004\022\372\001\uff66\000\006\056" +
    "\u0102\067\u0103\001\uff5e\000\006\024\355\064\353\001\uff7f" +
    "\000\002\001\uffc1\000\002\001\ufee8\000\006\076\325\077" +
    "\324\001\uff54\000\104\021\240\043\245\062\203\063\023" +
    "\076\176\077\175\100\251\101\173\102\236\103\206\104" +
    "\216\105\244\110\220\111\247\115\045\117\177\120\172" +
    "\121\070\122\233\125\011\130\015\132\060\136\020\137" +
    "\030\140\065\143\006\144\056\147\042\150\046\152\142" +
    "\154\252\155\227\156\246\001\002\000\006\005\u010e\043" +
    "\u0122\001\002\000\002\001\uff3a\000\002\001\ufeec\000\002" +
    "\001\ufeee\000\002\001\ufeeb\000\004\154\u0127\001\uff36\000" +
    "\116\017\010\020\067\021\240\043\245\047\031\050\076" +
    "\051\052\062\203\063\023\076\176\077\175\100\251\101" +
    "\173\102\236\103\206\104\216\105\244\110\220\111\247" +
    "\115\045\117\177\120\172\121\070\122\233\125\011\130" +
    "\015\132\060\136\020\137\030\140\065\143\006\144\056" +
    "\147\042\150\046\152\142\154\252\155\227\156\246\001" +
    "\002\000\002\001\ufee5\000\002\001\ufee4\000\006\057\321" +
    "\070\322\001\uff59\000\004\043\253\001\002\000\002\001" +
    "\uff25\000\050\017\010\020\067\047\031\050\076\051\052" +
    "\063\023\115\045\121\070\122\233\125\011\130\015\132" +
    "\060\136\020\137\030\140\065\143\006\144\056\147\042" +
    "\150\046\001\uffd3\000\004\044\320\001\002\000\052\017" +
    "\010\020\067\047\031\050\076\051\052\063\023\115\045" +
    "\121\070\122\233\125\011\130\015\132\060\136\020\137" +
    "\030\140\065\143\006\144\056\147\042\150\046\154\uffd3" +
    "\001\ufec4\000\022\021\145\022\153\043\166\046\265\062" +
    "\134\063\147\115\045\154\264\001\uff95\000\002\001\uff96" +
    "\000\002\001\uffdd\000\004\016\303\001\002\000\016\021" +
    "\145\022\153\062\134\063\147\115\045\154\264\001\ufecc" +
    "\000\004\043\166\001\ufecf\000\002\001\uffda\000\002\001" +
    "\uff91\000\002\001\uff94\000\006\021\272\154\271\001\002" +
    "\000\002\001\uff97\000\004\055\300\001\002\000\006\011" +
    "\027\045\032\001\ufe9f\000\006\017\010\020\067\001\uff83" +
    "\000\006\017\010\020\067\001\ufed6\000\002\001\uff84\000" +
    "\002\001\ufec7\000\002\001\ufed5\000\004\055\301\001\002" +
    "\000\002\001\uffce\000\004\016\303\001\002\000\042\017" +
    "\010\020\067\063\023\115\045\121\070\122\233\125\011" +
    "\130\015\132\060\136\020\137\030\140\065\143\006\144" +
    "\056\147\042\150\046\001\uffd3\000\002\001\uff93\000\022" +
    "\021\145\022\153\043\166\046\265\062\134\063\147\115" +
    "\045\154\264\001\uff95\000\050\011\027\017\010\020\067" +
    "\045\032\063\023\115\045\121\070\122\233\125\011\130" +
    "\015\132\060\136\020\137\030\140\065\143\006\144\056" +
    "\147\042\150\046\154\uffd3\001\ufe9f\000\002\001\ufed0\000" +
    "\002\001\ufed1\000\002\001\ufed2\000\002\001\ufecf\000\002" +
    "\001\ufece\000\002\001\ufecd\000\002\001\uff92\000\002\001" +
    "\ufec6\000\002\001\ufec5\000\002\001\uff3e\000\104\021\240" +
    "\043\245\062\203\063\023\076\176\077\175\100\251\101" +
    "\173\102\236\103\206\104\216\105\244\110\220\111\247" +
    "\115\045\117\177\120\172\121\070\122\233\125\011\130" +
    "\015\132\060\136\020\137\030\140\065\143\006\144\056" +
    "\147\042\150\046\152\142\154\252\155\227\156\246\001" +
    "\002\000\104\021\240\043\245\062\203\063\023\076\176" +
    "\077\175\100\251\101\173\102\236\103\206\104\216\105" +
    "\244\110\220\111\247\115\045\117\177\120\172\121\070" +
    "\122\233\125\011\130\015\132\060\136\020\137\030\140" +
    "\065\143\006\144\056\147\042\150\046\152\142\154\252" +
    "\155\227\156\246\001\002\000\006\076\325\077\324\001" +
    "\uff52\000\104\021\240\043\245\062\203\063\023\076\176" +
    "\077\175\100\251\101\173\102\236\103\206\104\216\105" +
    "\244\110\220\111\247\115\045\117\177\120\172\121\070" +
    "\122\233\125\011\130\015\132\060\136\020\137\030\140" +
    "\065\143\006\144\056\147\042\150\046\152\142\154\252" +
    "\155\227\156\246\001\002\000\104\021\240\043\245\062" +
    "\203\063\023\076\176\077\175\100\251\101\173\102\236" +
    "\103\206\104\216\105\244\110\220\111\247\115\045\117" +
    "\177\120\172\121\070\122\233\125\011\130\015\132\060" +
    "\136\020\137\030\140\065\143\006\144\056\147\042\150" +
    "\046\152\142\154\252\155\227\156\246\001\002\000\010" +
    "\062\327\071\331\072\330\001\uff4f\000\104\021\240\043" +
    "\245\062\203\063\023\076\176\077\175\100\251\101\173" +
    "\102\236\103\206\104\216\105\244\110\220\111\247\115" +
    "\045\117\177\120\172\121\070\122\233\125\011\130\015" +
    "\132\060\136\020\137\030\140\065\143\006\144\056\147" +
    "\042\150\046\152\142\154\252\155\227\156\246\001\002" +
    "\000\104\021\240\043\245\062\203\063\023\076\176\077" +
    "\175\100\251\101\173\102\236\103\206\104\216\105\244" +
    "\110\220\111\247\115\045\117\177\120\172\121\070\122" +
    "\233\125\011\130\015\132\060\136\020\137\030\140\065" +
    "\143\006\144\056\147\042\150\046\152\142\154\252\155" +
    "\227\156\246\001\002\000\104\021\240\043\245\062\203" +
    "\063\023\076\176\077\175\100\251\101\173\102\236\103" +
    "\206\104\216\105\244\110\220\111\247\115\045\117\177" +
    "\120\172\121\070\122\233\125\011\130\015\132\060\136" +
    "\020\137\030\140\065\143\006\144\056\147\042\150\046" +
    "\152\142\154\252\155\227\156\246\001\002\000\002\001" +
    "\uff4c\000\002\001\uff4b\000\002\001\uff4d\000\010\062\327" +
    "\071\331\072\330\001\uff50\000\006\076\325\077\324\001" +
    "\uff53\000\006\044\u0125\054\365\001\002\000\002\001\uff7b" +
    "\000\006\005\u010e\043\u0122\001\uffd8\000\004\044\u011f\001" +
    "\002\000\002\001\uff82\000\006\005\u010e\043\u011a\001\uffd6" +
    "\000\034\010\354\013\363\024\355\025\361\031\347\032" +
    "\360\033\362\034\352\035\350\036\357\037\356\061\346" +
    "\064\353\001\uff7f\000\002\001\uff70\000\002\001\uff78\000" +
    "\002\001\uff74\000\106\005\u010e\021\240\043\245\062\203" +
    "\063\023\076\176\077\175\100\251\101\173\102\236\103" +
    "\206\104\216\105\244\110\220\111\247\115\045\117\177" +
    "\120\172\121\070\122\233\125\011\130\015\132\060\136" +
    "\020\137\030\140\065\143\006\144\056\147\042\150\046" +
    "\152\142\154\252\155\227\156\246\001\002\000\002\001" +
    "\uff75\000\104\021\240\043\245\062\203\063\023\076\176" +
    "\077\175\100\251\101\173\102\236\103\206\104\216\105" +
    "\244\110\220\111\247\115\045\117\177\120\172\121\070" +
    "\122\233\125\011\130\015\132\060\136\020\137\030\140" +
    "\065\143\006\144\056\147\042\150\046\152\142\154\252" +
    "\155\227\156\246\001\002\000\002\001\uff79\000\104\021" +
    "\240\043\245\062\203\063\023\076\176\077\175\100\251" +
    "\101\173\102\236\103\206\104\216\105\244\110\220\111" +
    "\247\115\045\117\177\120\172\121\070\122\233\125\011" +
    "\130\015\132\060\136\020\137\030\140\065\143\006\144" +
    "\056\147\042\150\046\152\142\154\252\155\227\156\246" +
    "\001\002\000\002\001\uff72\000\002\001\uff73\000\002\001" +
    "\uff77\000\002\001\uff71\000\002\001\uff76\000\002\001\uff6f" +
    "\000\006\054\365\055\366\001\002\000\104\021\240\043" +
    "\245\062\203\063\023\076\176\077\175\100\251\101\173" +
    "\102\236\103\206\104\216\105\244\110\220\111\247\115" +
    "\045\117\177\120\172\121\070\122\233\125\011\130\015" +
    "\132\060\136\020\137\030\140\065\143\006\144\056\147" +
    "\042\150\046\152\142\154\252\155\227\156\246\001\002" +
    "\000\104\021\240\043\245\062\203\063\023\076\176\077" +
    "\175\100\251\101\173\102\236\103\206\104\216\105\244" +
    "\110\220\111\247\115\045\117\177\120\172\121\070\122" +
    "\233\125\011\130\015\132\060\136\020\137\030\140\065" +
    "\143\006\144\056\147\042\150\046\152\142\154\252\155" +
    "\227\156\246\001\002\000\002\001\uff7e\000\002\001\uff81" +
    "\000\004\022\372\001\uff65\000\104\021\240\043\245\062" +
    "\203\063\023\076\176\077\175\100\251\101\173\102\236" +
    "\103\206\104\216\105\244\110\220\111\247\115\045\117" +
    "\177\120\172\121\070\122\233\125\011\130\015\132\060" +
    "\136\020\137\030\140\065\143\006\144\056\147\042\150" +
    "\046\152\142\154\252\155\227\156\246\001\002\000\004" +
    "\065\374\001\uff63\000\104\021\240\043\245\062\203\063" +
    "\023\076\176\077\175\100\251\101\173\102\236\103\206" +
    "\104\216\105\244\110\220\111\247\115\045\117\177\120" +
    "\172\121\070\122\233\125\011\130\015\132\060\136\020" +
    "\137\030\140\065\143\006\144\056\147\042\150\046\152" +
    "\142\154\252\155\227\156\246\001\002\000\004\066\376" +
    "\001\uff61\000\104\021\240\043\245\062\203\063\023\076" +
    "\176\077\175\100\251\101\173\102\236\103\206\104\216" +
    "\105\244\110\220\111\247\115\045\117\177\120\172\121" +
    "\070\122\233\125\011\130\015\132\060\136\020\137\030" +
    "\140\065\143\006\144\056\147\042\150\046\152\142\154" +
    "\252\155\227\156\246\001\002\000\004\021\u0100\001\uff5f" +
    "\000\104\021\240\043\245\062\203\063\023\076\176\077" +
    "\175\100\251\101\173\102\236\103\206\104\216\105\244" +
    "\110\220\111\247\115\045\117\177\120\172\121\070\122" +
    "\233\125\011\130\015\132\060\136\020\137\030\140\065" +
    "\143\006\144\056\147\042\150\046\152\142\154\252\155" +
    "\227\156\246\001\002\000\006\056\u0102\067\u0103\001\uff5d" +
    "\000\104\021\240\043\245\062\203\063\023\076\176\077" +
    "\175\100\251\101\173\102\236\103\206\104\216\105\244" +
    "\110\220\111\247\115\045\117\177\120\172\121\070\122" +
    "\233\125\011\130\015\132\060\136\020\137\030\140\065" +
    "\143\006\144\056\147\042\150\046\152\142\154\252\155" +
    "\227\156\246\001\002\000\104\021\240\043\245\062\203" +
    "\063\023\076\176\077\175\100\251\101\173\102\236\103" +
    "\206\104\216\105\244\110\220\111\247\115\045\117\177" +
    "\120\172\121\070\122\233\125\011\130\015\132\060\136" +
    "\020\137\030\140\065\143\006\144\056\147\042\150\046" +
    "\152\142\154\252\155\227\156\246\001\002\000\012\014" +
    "\u0106\026\u0105\027\u0107\040\u0108\001\uff5b\000\104\021\240" +
    "\043\245\062\203\063\023\076\176\077\175\100\251\101" +
    "\173\102\236\103\206\104\216\105\244\110\220\111\247" +
    "\115\045\117\177\120\172\121\070\122\233\125\011\130" +
    "\015\132\060\136\020\137\030\140\065\143\006\144\056" +
    "\147\042\150\046\152\142\154\252\155\227\156\246\001" +
    "\002\000\104\021\240\043\245\062\203\063\023\076\176" +
    "\077\175\100\251\101\173\102\236\103\206\104\216\105" +
    "\244\110\220\111\247\115\045\117\177\120\172\121\070" +
    "\122\233\125\011\130\015\132\060\136\020\137\030\140" +
    "\065\143\006\144\056\147\042\150\046\152\142\154\252" +
    "\155\227\156\246\001\002\000\104\021\240\043\245\062" +
    "\203\063\023\076\176\077\175\100\251\101\173\102\236" +
    "\103\206\104\216\105\244\110\220\111\247\115\045\117" +
    "\177\120\172\121\070\122\233\125\011\130\015\132\060" +
    "\136\020\137\030\140\065\143\006\144\056\147\042\150" +
    "\046\152\142\154\252\155\227\156\246\001\002\000\104" +
    "\021\240\043\245\062\203\063\023\076\176\077\175\100" +
    "\251\101\173\102\236\103\206\104\216\105\244\110\220" +
    "\111\247\115\045\117\177\120\172\121\070\122\233\125" +
    "\011\130\015\132\060\136\020\137\030\140\065\143\006" +
    "\144\056\147\042\150\046\152\142\154\252\155\227\156" +
    "\246\001\002\000\006\057\321\070\322\001\uff56\000\006" +
    "\057\321\070\322\001\uff57\000\006\057\321\070\322\001" +
    "\uff55\000\006\057\321\070\322\001\uff58\000\012\014\u0106" +
    "\026\u0105\027\u0107\040\u0108\001\uff5a\000\110\005\u010e\006" +
    "\u0112\021\240\043\245\062\203\063\023\076\176\077\175" +
    "\100\251\101\173\102\236\103\206\104\216\105\244\110" +
    "\220\111\247\115\045\117\177\120\172\121\070\122\233" +
    "\125\011\130\015\132\060\136\020\137\030\140\065\143" +
    "\006\144\056\147\042\150\046\152\142\154\252\155\227" +
    "\156\246\001\002\000\002\001\uff7a\000\002\001\uff6d\000" +
    "\002\001\uff6e\000\002\001\uff6b\000\002\001\uff6a\000\004" +
    "\054\u0115\001\uff67\000\106\005\u010e\021\240\043\245\062" +
    "\203\063\023\076\176\077\175\100\251\101\173\102\236" +
    "\103\206\104\216\105\244\110\220\111\247\115\045\117" +
    "\177\120\172\121\070\122\233\125\011\130\015\132\060" +
    "\136\020\137\030\140\065\143\006\144\056\147\042\150" +
    "\046\152\142\154\252\155\227\156\246\001\uff68\000\004" +
    "\006\u0117\001\002\000\002\001\uff6c\000\002\001\uff69\000" +
    "\002\001\uff2d\000\106\005\u010e\021\240\043\245\062\203" +
    "\063\023\076\176\077\175\100\251\101\173\102\236\103" +
    "\206\104\216\105\244\110\220\111\247\115\045\117\177" +
    "\120\172\121\070\122\233\125\011\130\015\132\060\136" +
    "\020\137\030\140\065\143\006\144\056\147\042\150\046" +
    "\152\142\154\252\155\227\156\246\001\ufedf\000\004\054" +
    "\u011e\001\ufee0\000\004\044\u011d\001\002\000\002\001\uff2f" +
    "\000\106\005\u010e\021\240\043\245\062\203\063\023\076" +
    "\176\077\175\100\251\101\173\102\236\103\206\104\216" +
    "\105\244\110\220\111\247\115\045\117\177\120\172\121" +
    "\070\122\233\125\011\130\015\132\060\136\020\137\030" +
    "\140\065\143\006\144\056\147\042\150\046\152\142\154" +
    "\252\155\227\156\246\001\002\000\104\021\240\043\245" +
    "\062\203\063\023\076\176\077\175\100\251\101\173\102" +
    "\236\103\206\104\216\105\244\110\220\111\247\115\045" +
    "\117\177\120\172\121\070\122\233\125\011\130\015\132" +
    "\060\136\020\137\030\140\065\143\006\144\056\147\042" +
    "\150\046\152\142\154\252\155\227\156\246\001\002\000" +
    "\002\001\uff46\000\002\001\uff2e\000\106\005\u010e\021\240" +
    "\043\245\062\203\063\023\076\176\077\175\100\251\101" +
    "\173\102\236\103\206\104\216\105\244\110\220\111\247" +
    "\115\045\117\177\120\172\121\070\122\233\125\011\130" +
    "\015\132\060\136\020\137\030\140\065\143\006\144\056" +
    "\147\042\150\046\152\142\154\252\155\227\156\246\001" +
    "\ufedf\000\004\044\u0124\001\002\000\002\001\uff30\000\002" +
    "\001\uff1c\000\002\001\uff22\000\002\001\ufea2\000\002\001" +
    "\uff43\000\006\011\027\045\032\001\ufe9f\000\002\001\uffb1" +
    "\000\002\001\uffb0\000\002\001\uff28\000\110\005\u010e\021" +
    "\240\043\245\044\u013a\062\203\063\023\076\176\077\175" +
    "\100\251\101\173\102\236\103\206\104\216\105\244\110" +
    "\220\111\247\115\045\117\177\120\172\121\070\122\233" +
    "\125\011\130\015\132\060\136\020\137\030\140\065\143" +
    "\006\144\056\147\042\150\046\152\142\154\252\155\227" +
    "\156\246\001\002\000\002\001\uff29\000\010\105\135\152" +
    "\142\154\252\001\002\000\106\005\u010e\021\240\043\245" +
    "\062\203\063\023\076\176\077\175\100\251\101\173\102" +
    "\236\103\206\104\216\105\244\110\220\111\247\115\045" +
    "\117\177\120\172\121\070\122\233\125\011\130\015\132" +
    "\060\136\020\137\030\140\065\143\006\144\056\147\042" +
    "\150\046\152\142\154\252\155\227\156\246\001\ufee1\000" +
    "\010\105\135\152\142\154\252\001\002\000\002\001\uff2a" +
    "\000\002\001\uff2c\000\006\012\u0138\054\365\001\002\000" +
    "\004\012\u0137\001\002\000\002\001\ufee2\000\002\001\uff33" +
    "\000\002\001\uff34\000\002\001\uff2b\000\002\001\uff32\000" +
    "\006\044\u013c\054\u011e\001\002\000\002\001\uff31\000\002" +
    "\001\uff42\000\002\001\uff41\000\004\043\u0143\001\002\000" +
    "\116\017\010\020\067\021\240\043\245\047\031\050\076" +
    "\051\052\062\203\063\023\076\176\077\175\100\251\101" +
    "\173\102\236\103\206\104\216\105\244\110\220\111\247" +
    "\115\045\117\177\120\172\121\070\122\233\125\011\130" +
    "\015\132\060\136\020\137\030\140\065\143\006\144\056" +
    "\147\042\150\046\152\142\154\252\155\227\156\246\001" +
    "\002\000\004\044\u0142\001\002\000\002\001\uff40\000\004" +
    "\154\u0144\001\002\000\004\044\u0145\001\002\000\002\001" +
    "\uff3f\000\002\001\uff44\000\004\044\u0167\001\002\000\002" +
    "\001\uff90\000\002\001\uffe2\000\030\021\145\022\153\043" +
    "\u015f\046\u015e\055\140\062\134\063\147\105\135\115\045" +
    "\152\142\154\136\001\uff95\000\004\054\u0159\001\uff8e\000" +
    "\002\001\uff8a\000\110\015\u0149\017\010\020\067\021\145" +
    "\022\153\043\161\046\150\047\031\050\076\051\052\053" +
    "\044\055\140\060\077\062\134\063\u014e\075\037\105\135" +
    "\107\034\115\045\121\070\122\043\125\011\130\015\132" +
    "\060\136\020\137\030\140\065\141\022\143\006\144\056" +
    "\145\024\147\042\150\046\152\142\154\136\001\uffed\000" +
    "\006\115\045\154\264\001\002\000\002\001\uffec\000\002" +
    "\001\uff88\000\004\055\u0153\001\uffc0\000\066\015\u0149\017" +
    "\010\020\067\047\031\050\076\051\052\053\044\060\077" +
    "\063\023\075\037\107\034\115\045\121\070\122\043\125" +
    "\011\130\015\132\060\136\020\137\030\140\065\141\022" +
    "\143\006\144\056\145\024\147\042\150\046\001\uffed\000" +
    "\004\055\u0154\001\002\000\002\001\uffcf\000\006\021\u0156" +
    "\154\271\001\002\000\006\011\027\045\032\001\ufe9f\000" +
    "\006\017\010\020\067\001\uff83\000\002\001\ufec8\000\070" +
    "\015\u0149\017\010\020\067\046\u015a\047\031\050\076\051" +
    "\052\053\044\060\077\063\023\075\037\107\034\115\045" +
    "\121\070\122\043\125\011\130\015\132\060\136\020\137" +
    "\030\140\065\141\022\143\006\144\056\145\024\147\042" +
    "\150\046\001\uffd3\000\002\001\uff8d\000\002\001\uff89\000" +
    "\030\021\145\022\153\043\161\046\150\055\140\062\134" +
    "\063\147\105\135\115\045\152\142\154\136\001\ufecc\000" +
    "\004\010\u0164\001\002\000\010\105\135\152\142\154\252" +
    "\001\uff91\000\112\015\u0149\017\010\020\067\021\145\022" +
    "\153\043\161\044\u0148\046\150\047\031\050\076\051\052" +
    "\053\044\055\140\060\077\062\134\063\u014e\075\037\105" +
    "\135\107\034\115\045\121\070\122\043\125\011\130\015" +
    "\132\060\136\020\137\030\140\065\141\022\143\006\144" +
    "\056\145\024\147\042\150\046\152\142\154\136\001\002" +
    "\000\004\010\u0161\001\uff86\000\106\005\u010e\021\240\043" +
    "\245\062\203\063\023\076\176\077\175\100\251\101\173" +
    "\102\236\103\206\104\216\105\244\110\220\111\247\115" +
    "\045\117\177\120\172\121\070\122\233\125\011\130\015" +
    "\132\060\136\020\137\030\140\065\143\006\144\056\147" +
    "\042\150\046\152\142\154\252\155\227\156\246\001\002" +
    "\000\002\001\uff85\000\002\001\uffad\000\106\005\u010e\021" +
    "\240\043\245\062\203\063\023\076\176\077\175\100\251" +
    "\101\173\102\236\103\206\104\216\105\244\110\220\111" +
    "\247\115\045\117\177\120\172\121\070\122\233\125\011" +
    "\130\015\132\060\136\020\137\030\140\065\143\006\144" +
    "\056\147\042\150\046\152\142\154\252\155\227\156\246" +
    "\001\002\000\002\001\uff87\000\002\001\uffb4\000\002\001" +
    "\uff8f\000\002\001\uffaa\000\004\055\300\001\ufea2\000\030" +
    "\021\145\022\153\043\161\046\150\055\140\062\134\063" +
    "\147\105\135\115\045\152\142\154\136\001\002\000\002" +
    "\001\uffa5\000\002\001\uffa1\000\004\010\u016e\001\uffa0\000" +
    "\106\005\u010e\021\240\043\245\062\203\063\023\076\176" +
    "\077\175\100\251\101\173\102\236\103\206\104\216\105" +
    "\244\110\220\111\247\115\045\117\177\120\172\121\070" +
    "\122\233\125\011\130\015\132\060\136\020\137\030\140" +
    "\065\143\006\144\056\147\042\150\046\152\142\154\252" +
    "\155\227\156\246\001\002\000\002\001\uff9f\000\002\001" +
    "\ufec9\000\002\001\ufeca\000\006\005\u0173\055\u0175\001\002" +
    "\000\170\004\u01a1\005\u0173\006\u0199\007\014\015\u0149\017" +
    "\010\020\067\021\240\043\245\047\031\050\076\051\052" +
    "\053\044\060\077\062\203\063\023\075\037\076\176\077" +
    "\175\100\251\101\173\102\236\103\206\104\216\105\244" +
    "\107\034\110\220\111\247\115\045\116\u01a2\117\177\120" +
    "\172\121\070\122\043\123\u01a0\124\u01a5\125\011\126\u01a3" +
    "\127\u019c\130\015\132\060\133\u019d\134\u0198\135\u01a4\136" +
    "\020\137\030\140\065\141\022\142\u019e\143\006\144\056" +
    "\145\024\147\042\150\046\151\u019b\152\142\154\u0190\155" +
    "\227\156\246\001\002\000\002\001\ufff0\000\010\055\u0177" +
    "\115\045\154\u017c\001\002\000\002\001\uffbe\000\004\055" +
    "\u018b\001\002\000\002\001\uffb9\000\004\005\u0173\001\002" +
    "\000\004\055\uffdd\001\ufea4\000\004\154\u0169\001\002\000" +
    "\004\055\uffda\001\uffb8\000\006\005\u010e\043\u0186\001\002" +
    "\000\006\046\u0181\054\u0180\001\ufe84\000\004\055\u0153\001" +
    "\ufea3\000\010\055\u0177\115\045\154\u017c\001\002\000\002" +
    "\001\ufe85\000\002\001\uffbd\000\004\046\u0181\001\ufe84\000" +
    "\002\001\uffbc\000\002\001\uffba\000\106\005\u010e\021\240" +
    "\043\245\062\203\063\023\076\176\077\175\100\251\101" +
    "\173\102\236\103\206\104\216\105\244\110\220\111\247" +
    "\115\045\117\177\120\172\121\070\122\233\125\011\130" +
    "\015\132\060\136\020\137\030\140\065\143\006\144\056" +
    "\147\042\150\046\152\142\154\252\155\227\156\246\001" +
    "\ufedf\000\004\044\u0188\001\002\000\002\001\uffbb\000\002" +
    "\001\ufea6\000\002\001\uffbf\000\006\115\045\154\264\001" +
    "\002\000\004\154\u0169\001\002\000\004\055\uffdd\001\ufea5" +
    "\000\002\001\ufea7\000\002\001\uff10\000\004\055\u01e5\001" +
    "\uff25\000\002\001\uff0e\000\006\004\u01e4\054\365\001\002" +
    "\000\002\001\uff0d\000\002\001\uff11\000\170\004\u01a1\005" +
    "\u0173\006\u01e2\007\014\015\u0149\017\010\020\067\021\240" +
    "\043\245\047\031\050\076\051\052\053\044\060\077\062" +
    "\203\063\023\075\037\076\176\077\175\100\251\101\173" +
    "\102\236\103\206\104\216\105\244\107\034\110\220\111" +
    "\247\115\045\116\u01a2\117\177\120\172\121\070\122\043" +
    "\123\u01a0\124\u01a5\125\011\126\u01a3\127\u019c\130\015\132" +
    "\060\133\u019d\134\u0198\135\u01a4\136\020\137\030\140\065" +
    "\141\022\142\u019e\143\006\144\056\145\024\147\042\150" +
    "\046\151\u019b\152\142\154\u0190\155\227\156\246\001\002" +
    "\000\002\001\uff0f\000\002\001\uff12\000\004\154\u01e0\001" +
    "\002\000\002\001\uff19\000\032\004\130\021\145\022\153" +
    "\043\161\046\150\055\140\062\134\063\147\105\135\115" +
    "\045\152\142\154\136\001\002\000\004\043\u01dc\001\002" +
    "\000\166\004\u01a1\005\u0173\007\014\015\u0149\017\010\020" +
    "\067\021\240\043\245\047\031\050\076\051\052\053\044" +
    "\060\077\062\203\063\023\075\037\076\176\077\175\100" +
    "\251\101\173\102\236\103\206\104\216\105\244\107\034" +
    "\110\220\111\247\115\045\116\u01a2\117\177\120\172\121" +
    "\070\122\043\123\u01a0\124\u01a5\125\011\126\u01a3\127\u019c" +
    "\130\015\132\060\133\u019d\134\u0198\135\u01a4\136\020\137" +
    "\030\140\065\141\022\142\u019e\143\006\144\056\145\024" +
    "\147\042\150\046\151\u019b\152\142\154\u0190\155\227\156" +
    "\246\001\002\000\004\043\u01c2\001\002\000\106\004\u01bf" +
    "\021\240\043\245\062\203\063\023\076\176\077\175\100" +
    "\251\101\173\102\236\103\206\104\216\105\244\110\220" +
    "\111\247\115\045\117\177\120\172\121\070\122\233\125" +
    "\011\130\015\132\060\136\020\137\030\140\065\143\006" +
    "\144\056\147\042\150\046\152\142\154\252\155\227\156" +
    "\246\001\002\000\002\001\uff13\000\004\004\u01be\001\002" +
    "\000\002\001\uff08\000\004\055\u01bc\001\002\000\004\004" +
    "\u01bb\001\002\000\004\043\u01ab\001\002\000\104\021\240" +
    "\043\245\062\203\063\023\076\176\077\175\100\251\101" +
    "\173\102\236\103\206\104\216\105\244\110\220\111\247" +
    "\115\045\117\177\120\172\121\070\122\233\125\011\130" +
    "\015\132\060\136\020\137\030\140\065\143\006\144\056" +
    "\147\042\150\046\152\142\154\252\155\227\156\246\001" +
    "\002\000\002\001\uff15\000\002\001\uff0c\000\004\055\u01a9" +
    "\001\002\000\166\004\u01a1\005\u0173\007\014\015\u0149\017" +
    "\010\020\067\021\240\043\245\047\031\050\076\051\052" +
    "\053\044\060\077\062\203\063\023\075\037\076\176\077" +
    "\175\100\251\101\173\102\236\103\206\104\216\105\244" +
    "\107\034\110\220\111\247\115\045\116\u01a2\117\177\120" +
    "\172\121\070\122\043\123\u01a0\124\u01a5\125\011\126\u01a3" +
    "\127\u019c\130\015\132\060\133\u019d\134\u0198\135\u01a4\136" +
    "\020\137\030\140\065\141\022\142\u019e\143\006\144\056" +
    "\145\024\147\042\150\046\151\u019b\152\142\154\u0190\155" +
    "\227\156\246\001\002\000\002\001\uff0a\000\134\015\u0149" +
    "\017\010\020\067\021\240\043\245\047\031\050\076\051" +
    "\052\053\044\060\077\062\203\063\023\075\037\076\176" +
    "\077\175\100\251\101\173\102\236\103\206\104\216\105" +
    "\244\107\034\110\220\111\247\115\045\117\177\120\172" +
    "\121\070\122\043\125\011\130\015\132\060\136\020\137" +
    "\030\140\065\141\022\143\006\144\056\145\024\147\042" +
    "\150\046\152\142\154\252\155\227\156\246\001\002\000" +
    "\004\054\365\001\uff00\000\030\021\145\022\153\043\161" +
    "\046\150\055\140\062\134\063\147\105\135\115\045\152" +
    "\142\154\136\001\002\000\004\044\u01af\001\002\000\002" +
    "\001\uff06\000\166\004\u01a1\005\u0173\007\014\015\u0149\017" +
    "\010\020\067\021\240\043\245\047\031\050\076\051\052" +
    "\053\044\060\077\062\203\063\023\075\037\076\176\077" +
    "\175\100\251\101\173\102\236\103\206\104\216\105\244" +
    "\107\034\110\220\111\247\115\045\116\u01a2\117\177\120" +
    "\172\121\070\122\043\123\u01a0\124\u01a5\125\011\126\u01a3" +
    "\127\u019c\130\015\132\060\133\u019d\134\u0198\135\u01a4\136" +
    "\020\137\030\140\065\141\022\142\u019e\143\006\144\056" +
    "\145\024\147\042\150\046\151\u019b\152\142\154\u0190\155" +
    "\227\156\246\001\002\000\002\001\uff05\000\004\131\uff03" +
    "\001\uff01\000\004\131\u01b5\001\002\000\002\001\uff04\000" +
    "\166\004\u01a1\005\u0173\007\014\015\u0149\017\010\020\067" +
    "\021\240\043\245\047\031\050\076\051\052\053\044\060" +
    "\077\062\203\063\023\075\037\076\176\077\175\100\251" +
    "\101\173\102\236\103\206\104\216\105\244\107\034\110" +
    "\220\111\247\115\045\116\u01a2\117\177\120\172\121\070" +
    "\122\043\123\u01a0\124\u01a5\125\011\126\u01a3\127\u019c\130" +
    "\015\132\060\133\u019d\134\u0198\135\u01a4\136\020\137\030" +
    "\140\065\141\022\142\u019e\143\006\144\056\145\024\147" +
    "\042\150\046\151\u019b\152\142\154\u0190\155\227\156\246" +
    "\001\002\000\002\001\uff02\000\006\005\u010e\010\u01b8\001" +
    "\002\000\106\005\u010e\021\240\043\245\062\203\063\023" +
    "\076\176\077\175\100\251\101\173\102\236\103\206\104" +
    "\216\105\244\110\220\111\247\115\045\117\177\120\172" +
    "\121\070\122\233\125\011\130\015\132\060\136\020\137" +
    "\030\140\065\143\006\144\056\147\042\150\046\152\142" +
    "\154\252\155\227\156\246\001\002\000\002\001\ufefe\000" +
    "\002\001\ufeff\000\002\001\ufef2\000\166\004\u01a1\005\u0173" +
    "\007\014\015\u0149\017\010\020\067\021\240\043\245\047" +
    "\031\050\076\051\052\053\044\060\077\062\203\063\023" +
    "\075\037\076\176\077\175\100\251\101\173\102\236\103" +
    "\206\104\216\105\244\107\034\110\220\111\247\115\045" +
    "\116\u01a2\117\177\120\172\121\070\122\043\123\u01a0\124" +
    "\u01a5\125\011\126\u01a3\127\u019c\130\015\132\060\133\u019d" +
    "\134\u0198\135\u01a4\136\020\137\030\140\065\141\022\142" +
    "\u019e\143\006\144\056\145\024\147\042\150\046\151\u019b" +
    "\152\142\154\u0190\155\227\156\246\001\002\000\002\001" +
    "\uff09\000\002\001\ufef3\000\002\001\ufef1\000\006\004\u01c1" +
    "\054\365\001\002\000\002\001\ufef0\000\136\004\u01a1\015" +
    "\u0149\017\010\020\067\021\240\043\245\047\031\050\076" +
    "\051\052\053\044\060\077\062\203\063\023\075\037\076" +
    "\176\077\175\100\251\101\173\102\236\103\206\104\216" +
    "\105\244\107\034\110\220\111\247\115\045\117\177\120" +
    "\172\121\070\122\043\125\011\130\015\132\060\136\020" +
    "\137\030\140\065\141\022\143\006\144\056\145\024\147" +
    "\042\150\046\152\142\154\252\155\227\156\246\001\002" +
    "\000\030\021\145\022\153\043\161\046\150\055\140\062" +
    "\134\063\147\105\135\115\045\152\142\154\136\001\002" +
    "\000\002\001\ufef5\000\004\055\u01cf\001\002\000\002\001" +
    "\ufef4\000\050\017\010\020\067\047\031\050\076\051\052" +
    "\063\023\115\045\121\070\122\233\125\011\130\015\132" +
    "\060\136\020\137\030\140\065\143\006\144\056\147\042" +
    "\150\046\001\uffea\000\134\015\u0149\017\010\020\067\021" +
    "\240\043\245\047\031\050\076\051\052\053\044\060\077" +
    "\062\203\063\023\075\037\076\176\077\175\100\251\101" +
    "\173\102\236\103\206\104\216\105\244\107\034\110\220" +
    "\111\247\115\045\117\177\120\172\121\070\122\043\125" +
    "\011\130\015\132\060\136\020\137\030\140\065\141\022" +
    "\143\006\144\056\145\024\147\042\150\046\152\142\154" +
    "\252\155\227\156\246\001\ufefc\000\002\001\ufefd\000\004" +
    "\004\u01cb\001\002\000\106\004\u01a1\021\240\043\245\062" +
    "\203\063\023\076\176\077\175\100\251\101\173\102\236" +
    "\103\206\104\216\105\244\110\220\111\247\115\045\117" +
    "\177\120\172\121\070\122\233\125\011\130\015\132\060" +
    "\136\020\137\030\140\065\143\006\144\056\147\042\150" +
    "\046\152\142\154\252\155\227\156\246\001\002\000\004" +
    "\044\u01cd\001\002\000\166\004\u01a1\005\u0173\007\014\015" +
    "\u0149\017\010\020\067\021\240\043\245\047\031\050\076" +
    "\051\052\053\044\060\077\062\203\063\023\075\037\076" +
    "\176\077\175\100\251\101\173\102\236\103\206\104\216" +
    "\105\244\107\034\110\220\111\247\115\045\116\u01a2\117" +
    "\177\120\172\121\070\122\043\123\u01a0\124\u01a5\125\011" +
    "\126\u01a3\127\u019c\130\015\132\060\133\u019d\134\u0198\135" +
    "\u01a4\136\020\137\030\140\065\141\022\142\u019e\143\006" +
    "\144\056\145\024\147\042\150\046\151\u019b\152\142\154" +
    "\u0190\155\227\156\246\001\002\000\002\001\ufef9\000\104" +
    "\021\240\043\245\062\203\063\023\076\176\077\175\100" +
    "\251\101\173\102\236\103\206\104\216\105\244\110\220" +
    "\111\247\115\045\117\177\120\172\121\070\122\233\125" +
    "\011\130\015\132\060\136\020\137\030\140\065\143\006" +
    "\144\056\147\042\150\046\152\142\154\252\155\227\156" +
    "\246\001\002\000\004\044\u01d3\001\002\000\006\005\u010e" +
    "\054\365\001\002\000\002\001\ufef6\000\166\004\u01a1\005" +
    "\u0173\007\014\015\u0149\017\010\020\067\021\240\043\245" +
    "\047\031\050\076\051\052\053\044\060\077\062\203\063" +
    "\023\075\037\076\176\077\175\100\251\101\173\102\236" +
    "\103\206\104\216\105\244\107\034\110\220\111\247\115" +
    "\045\116\u01a2\117\177\120\172\121\070\122\043\123\u01a0" +
    "\124\u01a5\125\011\126\u01a3\127\u019c\130\015\132\060\133" +
    "\u019d\134\u0198\135\u01a4\136\020\137\030\140\065\141\022" +
    "\142\u019e\143\006\144\056\145\024\147\042\150\046\151" +
    "\u019b\152\142\154\u0190\155\227\156\246\001\002\000\002" +
    "\001\ufef8\000\002\001\ufef7\000\004\151\u01d7\001\002\000" +
    "\004\043\u01d8\001\002\000\104\021\240\043\245\062\203" +
    "\063\023\076\176\077\175\100\251\101\173\102\236\103" +
    "\206\104\216\105\244\110\220\111\247\115\045\117\177" +
    "\120\172\121\070\122\233\125\011\130\015\132\060\136" +
    "\020\137\030\140\065\143\006\144\056\147\042\150\046" +
    "\152\142\154\252\155\227\156\246\001\002\000\006\044" +
    "\u01da\054\365\001\002\000\004\004\u01db\001\002\000\002" +
    "\001\ufefa\000\134\015\u0149\017\010\020\067\021\240\043" +
    "\245\047\031\050\076\051\052\053\044\060\077\062\203" +
    "\063\023\075\037\076\176\077\175\100\251\101\173\102" +
    "\236\103\206\104\216\105\244\107\034\110\220\111\247" +
    "\115\045\117\177\120\172\121\070\122\043\125\011\130" +
    "\015\132\060\136\020\137\030\140\065\141\022\143\006" +
    "\144\056\145\024\147\042\150\046\152\142\154\252\155" +
    "\227\156\246\001\002\000\004\044\u01de\001\002\000\166" +
    "\004\u01a1\005\u0173\007\014\015\u0149\017\010\020\067\021" +
    "\240\043\245\047\031\050\076\051\052\053\044\060\077" +
    "\062\203\063\023\075\037\076\176\077\175\100\251\101" +
    "\173\102\236\103\206\104\216\105\244\107\034\110\220" +
    "\111\247\115\045\116\u01a2\117\177\120\172\121\070\122" +
    "\043\123\u01a0\124\u01a5\125\011\126\u01a3\127\u019c\130\015" +
    "\132\060\133\u019d\134\u0198\135\u01a4\136\020\137\030\140" +
    "\065\141\022\142\u019e\143\006\144\056\145\024\147\042" +
    "\150\046\151\u019b\152\142\154\u0190\155\227\156\246\001" +
    "\002\000\002\001\ufefb\000\004\004\u01e1\001\002\000\002" +
    "\001\ufeef\000\002\001\uff18\000\002\001\uff14\000\002\001" +
    "\uff07\000\166\004\u01a1\005\u0173\007\014\015\u0149\017\010" +
    "\020\067\021\240\043\245\047\031\050\076\051\052\053" +
    "\044\060\077\062\203\063\023\075\037\076\176\077\175" +
    "\100\251\101\173\102\236\103\206\104\216\105\244\107" +
    "\034\110\220\111\247\115\045\116\u01a2\117\177\120\172" +
    "\121\070\122\043\123\u01a0\124\u01a5\125\011\126\u01a3\127" +
    "\u019c\130\015\132\060\133\u019d\134\u0198\135\u01a4\136\020" +
    "\137\030\140\065\141\022\142\u019e\143\006\144\056\145" +
    "\024\147\042\150\046\151\u019b\152\142\154\u0190\155\227" +
    "\156\246\001\002\000\002\001\uff0b\000\002\001\uff21\000" +
    "\002\001\uff20\000\002\001\ufe83\000\002\001\002\000\002" +
    "\001\uff1f\000\004\055\u01ed\001\002\000\002\001\uffd0\000" +
    "\006\115\045\154\264\001\002\000\004\154\u0127\001\002" +
    "\000\004\055\uffdd\001\uffab\000\004\154\271\001\002\000" +
    "\002\001\uffac\000\006\017\010\020\067\001\uff83\000\002" +
    "\001\ufecb\000\004\016\303\001\uffb2\000\002\001\uffb6\000" +
    "\104\021\240\043\245\062\203\063\023\076\176\077\175" +
    "\100\251\101\173\102\236\103\206\104\216\105\244\110" +
    "\220\111\247\115\045\117\177\120\172\121\070\122\233" +
    "\125\011\130\015\132\060\136\020\137\030\140\065\143" +
    "\006\144\056\147\042\150\046\152\142\154\252\155\227" +
    "\156\246\001\002\000\006\044\u01f9\054\365\001\002\000" +
    "\002\001\ufea1\000\002\001\001\000\100\004\025\005\u01fc" +
    "\007\014\011\027\015\033\017\010\020\067\045\032\047" +
    "\031\050\076\051\052\053\044\060\077\063\023\075\037" +
    "\107\034\115\045\121\070\122\043\125\011\130\015\132" +
    "\060\136\020\137\030\140\065\141\022\143\006\144\056" +
    "\145\024\147\042\150\046\001\uffd3\000\070\015\u0149\017" +
    "\010\020\067\047\031\050\076\051\052\053\044\060\077" +
    "\063\023\075\037\107\034\115\045\121\070\122\043\125" +
    "\011\130\015\132\060\136\020\137\030\140\065\141\022" +
    "\143\006\144\056\145\024\147\042\150\046\154\uffd3\001" +
    "\uffee\000\002\001\ufff4\000\004\006\u0200\001\002\000\002" +
    "\001\uffef\000\002\001\ufff5\000\050\017\010\020\067\047" +
    "\031\050\076\051\052\063\023\115\045\121\070\122\233" +
    "\125\011\130\015\132\060\136\020\137\030\140\065\143" +
    "\006\144\056\147\042\150\046\001\uffd3\000\004\046\u0181" +
    "\001\ufe84\000\004\044\u0204\001\002\000\002\001\ufe87\000" +
    "\004\154\u0208\001\ufe95\000\002\001\ufe90\000\004\043\u0217" +
    "\001\ufe92\000\004\055\u0213\001\ufe91\000\004\046\u0212\001" +
    "\ufe96\000\006\012\u020d\054\u020c\001\002\000\002\001\ufe98" +
    "\000\004\154\u0208\001\ufe95\000\004\012\u020e\001\002\000" +
    "\002\001\ufe9c\000\004\046\u0211\001\ufe96\000\002\001\ufe97" +
    "\000\002\001\ufe99\000\002\001\ufe9a\000\004\055\u0214\001" +
    "\002\000\004\154\u0215\001\002\000\002\001\ufe8f\000\002" +
    "\001\ufe94\000\010\005\u021a\011\u021e\043\u021c\001\002\000" +
    "\002\001\ufe93\000\012\005\u021a\011\u021e\043\u021c\044\u0226" +
    "\001\002\000\010\005\u021a\011\u021e\043\u021c\001\002\000" +
    "\002\001\ufe88\000\010\005\u021a\011\u021e\043\u021c\001\002" +
    "\000\002\001\ufe8d\000\010\005\u021a\011\u021e\043\u021c\001" +
    "\002\000\012\005\u021a\011\u021e\012\u0220\043\u021c\001\002" +
    "\000\002\001\ufe8a\000\002\001\ufe8c\000\012\005\u021a\011" +
    "\u021e\043\u021c\044\u0223\001\002\000\002\001\ufe8b\000\012" +
    "\005\u021a\006\u0225\011\u021e\043\u021c\001\002\000\002\001" +
    "\ufe89\000\002\001\ufe8e\000\004\010\u0228\001\002\000\050" +
    "\017\010\020\067\047\031\050\076\051\052\063\023\115" +
    "\045\121\070\122\233\125\011\130\015\132\060\136\020" +
    "\137\030\140\065\143\006\144\056\147\042\150\046\001" +
    "\uffd3\000\004\004\u022a\001\002\000\002\001\uff98\000\004" +
    "\154\264\001\002\000\002\001\uffcd\000\002\001\ufffc" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u022b\000\076\012\060\037\054\043\016\053\046\057" +
    "\053\060\004\061\015\074\072\077\071\113\074\117\040" +
    "\120\012\121\052\136\050\141\063\143\020\145\070\151" +
    "\034\152\062\153\065\157\006\164\037\165\025\173\035" +
    "\174\003\175\073\176\061\206\056\207\047\210\011\001" +
    "\001\000\070\012\060\037\054\043\016\053\046\057\053" +
    "\060\004\061\015\074\072\077\071\113\074\120\012\121" +
    "\052\136\050\141\063\143\020\145\070\151\034\152\062" +
    "\153\065\157\006\164\037\165\025\175\u022c\176\061\206" +
    "\056\207\047\210\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\044\u01f0\135\257\136\154\211\140\212\u022a" +
    "\213\151\214\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\116\u01fa\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\015\143\031\130\044\156\047\136\110\155" +
    "\133\150\135\131\136\154\156\126\162\132\205\157\211" +
    "\140\213\151\214\125\235\145\236\161\244\153\245\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\112\102\113\101\141\063\143\020\001" +
    "\001\000\002\001\001\000\006\141\100\143\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\141\100\143\020\001\001\000\006" +
    "\075\104\076\103\001\001\000\010\025\105\026\107\166" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\166\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\115\115\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\073\123" +
    "\154\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\163\u01f4\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\031\u0165\044\156\047\136\110\155\133\150\135\131" +
    "\136\154\156\162\162\132\205\157\211\140\213\151\214" +
    "\125\235\145\236\161\001\001\000\012\112\u01f2\113\101" +
    "\141\063\143\020\001\001\000\004\135\u0125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\043\016\050\u01e9\053\254\057\053\060" +
    "\004\061\015\074\072\077\071\136\050\145\070\151\034" +
    "\152\062\153\065\210\011\234\u01e6\237\u01e7\001\001\000" +
    "\002\001\001\000\004\260\u0171\001\001\000\012\112\u0170" +
    "\113\101\141\063\143\020\001\001\000\002\001\001\000" +
    "\016\044\u0154\135\257\136\154\211\140\213\151\214\125" +
    "\001\001\000\014\047\136\110\u0162\133\150\235\145\236" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\112\u016f\113\101\141\063\143\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\135\u0167" +
    "\001\001\000\002\001\001\000\040\031\163\044\156\047" +
    "\136\110\155\133\150\135\131\136\154\156\162\162\132" +
    "\205\157\211\140\213\151\214\125\235\145\236\161\001" +
    "\001\000\002\001\001\000\004\163\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\037\u014c\043\016\053" +
    "\046\057\053\060\004\061\015\074\072\077\071\114\u0146" +
    "\136\050\145\070\151\034\152\062\153\065\202\u0149\206" +
    "\056\207\047\210\011\217\u014a\220\u014b\001\001\000\002" +
    "\001\001\000\112\004\206\005\222\016\221\017\212\020" +
    "\207\021\230\022\220\023\247\030\214\032\233\033\240" +
    "\045\201\046\234\047\136\054\216\055\173\056\203\057" +
    "\236\061\177\063\204\064\170\100\200\106\211\107\210" +
    "\110\224\116\242\122\225\123\241\124\231\131\227\132" +
    "\223\133\150\136\050\210\011\235\145\236\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\005\222\030" +
    "\214\032\233\033\240\045\201\047\136\055\173\056\203" +
    "\057\236\061\177\063\u0145\064\170\100\200\106\211\107" +
    "\210\110\224\116\242\123\241\132\223\133\150\136\050" +
    "\210\011\235\145\236\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\102\u0118\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\005\222\030\214\032\233\033\240\045\201\047\136\055" +
    "\u013d\056\203\057\236\061\177\064\170\100\200\106\211" +
    "\107\210\110\224\116\242\123\241\132\223\133\150\136" +
    "\050\210\011\235\145\236\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\005\222\030\214\032\233\033" +
    "\240\045\201\047\136\055\173\056\203\057\236\061\177" +
    "\063\u013c\064\170\100\200\106\211\107\210\110\224\116" +
    "\242\123\241\132\223\133\150\136\050\210\011\235\145" +
    "\236\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\112\u012a\113\101\141\063\143\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\005\222\030\214\032\233\033\240\045\201" +
    "\047\136\055\173\056\203\057\236\061\177\063\u0127\064" +
    "\170\100\200\106\211\107\210\110\224\116\242\123\241" +
    "\132\223\133\150\136\050\210\011\235\145\236\161\001" +
    "\001\000\004\102\u0120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\135" +
    "\u0125\001\001\000\142\004\337\005\222\016\221\017\212" +
    "\020\207\021\230\022\220\023\247\030\214\032\233\033" +
    "\240\043\016\045\201\046\234\047\136\050\255\053\254" +
    "\055\173\056\203\057\340\060\004\061\343\063\204\064" +
    "\170\074\072\077\071\100\200\106\211\107\210\110\224" +
    "\116\242\122\225\123\241\124\344\125\336\126\342\131" +
    "\227\132\223\133\150\136\050\145\070\151\034\152\062" +
    "\153\065\177\341\210\011\235\145\236\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\043\016\050\255\053" +
    "\254\057\053\060\004\061\015\074\072\077\071\136\050" +
    "\145\070\151\034\152\062\153\065\177\253\210\011\001" +
    "\001\000\002\001\001\000\040\043\016\050\316\053\254" +
    "\057\053\060\004\061\015\074\072\077\071\111\315\136" +
    "\050\145\070\151\034\152\062\153\065\210\011\001\001" +
    "\000\032\044\266\051\267\052\256\135\257\136\154\161" +
    "\262\162\261\163\260\167\265\211\140\213\151\214\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\314\001\001\000\026\044\266\062\312\135\257\136\154" +
    "\161\311\162\261\167\313\211\140\213\151\214\125\001" +
    "\001\000\004\163\301\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\112\272\113\101\141\063" +
    "\143\020\001\001\000\010\042\275\043\273\146\274\001" +
    "\001\000\006\043\273\146\276\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\303\001\001\000\022\041\304" +
    "\043\016\057\053\060\004\061\015\136\050\151\305\210" +
    "\011\001\001\000\002\001\001\000\032\044\266\051\310" +
    "\052\256\135\257\136\154\161\262\162\261\163\260\167" +
    "\265\211\140\213\151\214\125\001\001\000\032\041\306" +
    "\043\016\057\053\060\004\061\015\112\307\113\101\136" +
    "\050\141\063\143\020\151\305\210\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\066\005\222\030\214\032\233\033\240\045\201\046\335" +
    "\047\136\055\173\056\203\057\236\061\177\063\204\064" +
    "\170\100\200\106\211\107\210\110\224\116\242\122\225" +
    "\123\241\132\223\133\150\136\050\210\011\235\145\236" +
    "\161\001\001\000\066\005\222\030\214\032\233\033\240" +
    "\045\201\046\322\047\136\055\173\056\203\057\236\061" +
    "\177\063\204\064\170\100\200\106\211\107\210\110\224" +
    "\116\242\122\225\123\241\132\223\133\150\136\050\210" +
    "\011\235\145\236\161\001\001\000\002\001\001\000\064" +
    "\005\222\030\214\032\233\033\240\045\201\047\136\055" +
    "\173\056\203\057\236\061\177\063\204\064\170\100\200" +
    "\106\211\107\210\110\224\116\242\122\334\123\241\132" +
    "\223\133\150\136\050\210\011\235\145\236\161\001\001" +
    "\000\064\005\222\030\214\032\233\033\240\045\201\047" +
    "\136\055\173\056\203\057\236\061\177\063\204\064\170" +
    "\100\200\106\211\107\210\110\224\116\242\122\325\123" +
    "\241\132\223\133\150\136\050\210\011\235\145\236\161" +
    "\001\001\000\002\001\001\000\062\005\222\030\214\032" +
    "\233\033\240\045\201\047\136\055\173\056\203\057\236" +
    "\061\177\063\333\064\170\100\200\106\211\107\210\110" +
    "\224\116\242\123\241\132\223\133\150\136\050\210\011" +
    "\235\145\236\161\001\001\000\062\005\222\030\214\032" +
    "\233\033\240\045\201\047\136\055\173\056\203\057\236" +
    "\061\177\063\332\064\170\100\200\106\211\107\210\110" +
    "\224\116\242\123\241\132\223\133\150\136\050\210\011" +
    "\235\145\236\161\001\001\000\062\005\222\030\214\032" +
    "\233\033\240\045\201\047\136\055\173\056\203\057\236" +
    "\061\177\063\331\064\170\100\200\106\211\107\210\110" +
    "\224\116\242\123\241\132\223\133\150\136\050\210\011" +
    "\235\145\236\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\102\u0120\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\102\u0118" +
    "\001\001\000\004\011\350\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\116\004\337\005\222" +
    "\016\221\017\212\020\207\021\230\022\220\023\247\030" +
    "\214\032\233\033\240\045\201\046\234\047\136\055\173" +
    "\056\203\057\236\061\177\063\204\064\170\100\200\102" +
    "\u010f\106\211\107\210\110\224\116\242\122\225\123\241" +
    "\124\344\126\u0110\127\u010e\131\227\132\223\133\150\136" +
    "\050\210\011\235\145\236\161\001\001\000\002\001\001" +
    "\000\104\005\222\016\221\017\212\020\207\021\230\022" +
    "\220\023\247\030\214\032\233\033\240\045\201\046\234" +
    "\047\136\055\173\056\203\057\236\061\177\063\204\064" +
    "\170\100\200\106\211\107\210\110\224\116\242\122\225" +
    "\123\241\131\370\132\223\133\150\136\050\210\011\235" +
    "\145\236\161\001\001\000\002\001\001\000\114\004\337" +
    "\005\222\016\221\017\212\020\207\021\230\022\220\023" +
    "\247\030\214\032\233\033\240\045\201\046\234\047\136" +
    "\055\173\056\203\057\236\061\177\063\204\064\170\100" +
    "\200\106\211\107\210\110\224\116\242\122\225\123\241" +
    "\124\344\125\363\126\342\131\227\132\223\133\150\136" +
    "\050\210\011\235\145\236\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\112" +
    "\004\337\005\222\016\221\017\212\020\207\021\230\022" +
    "\220\023\247\030\214\032\233\033\240\045\201\046\234" +
    "\047\136\055\173\056\203\057\236\061\177\063\204\064" +
    "\170\100\200\106\211\107\210\110\224\116\242\122\225" +
    "\123\241\124\344\126\367\131\227\132\223\133\150\136" +
    "\050\210\011\235\145\236\161\001\001\000\112\004\337" +
    "\005\222\016\221\017\212\020\207\021\230\022\220\023" +
    "\247\030\214\032\233\033\240\045\201\046\234\047\136" +
    "\055\173\056\203\057\236\061\177\063\204\064\170\100" +
    "\200\106\211\107\210\110\224\116\242\122\225\123\241" +
    "\124\344\126\366\131\227\132\223\133\150\136\050\210" +
    "\011\235\145\236\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\102\005\222\016\372\017" +
    "\212\020\207\021\230\022\220\023\247\030\214\032\233" +
    "\033\240\045\201\046\234\047\136\055\173\056\203\057" +
    "\236\061\177\063\204\064\170\100\200\106\211\107\210" +
    "\110\224\116\242\122\225\123\241\132\223\133\150\136" +
    "\050\210\011\235\145\236\161\001\001\000\002\001\001" +
    "\000\100\005\222\017\374\020\207\021\230\022\220\023" +
    "\247\030\214\032\233\033\240\045\201\046\234\047\136" +
    "\055\173\056\203\057\236\061\177\063\204\064\170\100" +
    "\200\106\211\107\210\110\224\116\242\122\225\123\241" +
    "\132\223\133\150\136\050\210\011\235\145\236\161\001" +
    "\001\000\002\001\001\000\076\005\222\020\376\021\230" +
    "\022\220\023\247\030\214\032\233\033\240\045\201\046" +
    "\234\047\136\055\173\056\203\057\236\061\177\063\204" +
    "\064\170\100\200\106\211\107\210\110\224\116\242\122" +
    "\225\123\241\132\223\133\150\136\050\210\011\235\145" +
    "\236\161\001\001\000\002\001\001\000\074\005\222\021" +
    "\u0100\022\220\023\247\030\214\032\233\033\240\045\201" +
    "\046\234\047\136\055\173\056\203\057\236\061\177\063" +
    "\204\064\170\100\200\106\211\107\210\110\224\116\242" +
    "\122\225\123\241\132\223\133\150\136\050\210\011\235" +
    "\145\236\161\001\001\000\002\001\001\000\072\005\222" +
    "\022\u010c\023\247\030\214\032\233\033\240\045\201\046" +
    "\234\047\136\055\173\056\203\057\236\061\177\063\204" +
    "\064\170\100\200\106\211\107\210\110\224\116\242\122" +
    "\225\123\241\132\223\133\150\136\050\210\011\235\145" +
    "\236\161\001\001\000\072\005\222\022\u0103\023\247\030" +
    "\214\032\233\033\240\045\201\046\234\047\136\055\173" +
    "\056\203\057\236\061\177\063\204\064\170\100\200\106" +
    "\211\107\210\110\224\116\242\122\225\123\241\132\223" +
    "\133\150\136\050\210\011\235\145\236\161\001\001\000" +
    "\002\001\001\000\070\005\222\023\u010b\030\214\032\233" +
    "\033\240\045\201\046\234\047\136\055\173\056\203\057" +
    "\236\061\177\063\204\064\170\100\200\106\211\107\210" +
    "\110\224\116\242\122\225\123\241\132\223\133\150\136" +
    "\050\210\011\235\145\236\161\001\001\000\070\005\222" +
    "\023\u010a\030\214\032\233\033\240\045\201\046\234\047" +
    "\136\055\173\056\203\057\236\061\177\063\204\064\170" +
    "\100\200\106\211\107\210\110\224\116\242\122\225\123" +
    "\241\132\223\133\150\136\050\210\011\235\145\236\161" +
    "\001\001\000\070\005\222\023\u0109\030\214\032\233\033" +
    "\240\045\201\046\234\047\136\055\173\056\203\057\236" +
    "\061\177\063\204\064\170\100\200\106\211\107\210\110" +
    "\224\116\242\122\225\123\241\132\223\133\150\136\050" +
    "\210\011\235\145\236\161\001\001\000\070\005\222\023" +
    "\u0108\030\214\032\233\033\240\045\201\046\234\047\136" +
    "\055\173\056\203\057\236\061\177\063\204\064\170\100" +
    "\200\106\211\107\210\110\224\116\242\122\225\123\241" +
    "\132\223\133\150\136\050\210\011\235\145\236\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\120\004\337\005" +
    "\222\016\221\017\212\020\207\021\230\022\220\023\247" +
    "\030\214\032\233\033\240\045\201\046\234\047\136\055" +
    "\173\056\203\057\236\061\177\063\204\064\170\100\200" +
    "\102\u010f\104\u0113\106\211\107\210\110\224\116\242\122" +
    "\225\123\241\124\344\126\u0110\127\u0112\131\227\132\223" +
    "\133\150\136\050\210\011\235\145\236\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\103\u0115\001\001\000" +
    "\116\004\337\005\222\016\221\017\212\020\207\021\230" +
    "\022\220\023\247\030\214\032\233\033\240\045\201\046" +
    "\234\047\136\055\173\056\203\057\236\061\177\063\204" +
    "\064\170\100\200\102\u010f\106\211\107\210\110\224\116" +
    "\242\122\225\123\241\124\344\126\u0110\127\u0117\131\227" +
    "\132\223\133\150\136\050\210\011\235\145\236\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\122\004\337\005\222\016\221\017" +
    "\212\020\207\021\230\022\220\023\247\030\214\032\233" +
    "\033\240\045\201\046\234\047\136\055\173\056\203\057" +
    "\236\061\177\063\204\064\170\100\200\102\u010f\104\u011a" +
    "\106\211\107\210\110\224\116\242\122\225\123\241\124" +
    "\344\126\u0110\127\u0112\131\227\132\223\133\150\136\050" +
    "\147\u011b\210\011\235\145\236\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\116\004\337" +
    "\005\222\016\221\017\212\020\207\021\230\022\220\023" +
    "\247\030\214\032\233\033\240\045\201\046\234\047\136" +
    "\055\173\056\203\057\236\061\177\063\204\064\170\100" +
    "\200\102\u010f\106\211\107\210\110\224\116\242\122\225" +
    "\123\241\124\344\126\u0110\127\u0117\131\227\132\223\133" +
    "\150\136\050\210\011\235\145\236\161\001\001\000\062" +
    "\005\222\030\214\032\233\033\240\045\201\047\136\055" +
    "\173\056\203\057\236\061\177\063\u011f\064\170\100\200" +
    "\106\211\107\210\110\224\116\242\123\241\132\223\133" +
    "\150\136\050\210\011\235\145\236\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\122\004\337\005\222\016" +
    "\221\017\212\020\207\021\230\022\220\023\247\030\214" +
    "\032\233\033\240\045\201\046\234\047\136\055\173\056" +
    "\203\057\236\061\177\063\204\064\170\100\200\102\u010f" +
    "\104\u011a\106\211\107\210\110\224\116\242\122\225\123" +
    "\241\124\344\126\u0110\127\u0112\131\227\132\223\133\150" +
    "\136\050\147\u0122\210\011\235\145\236\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\112" +
    "\u0129\113\101\141\063\143\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\120\004\337\005" +
    "\222\016\221\017\212\020\207\021\230\022\220\023\247" +
    "\030\214\032\233\033\240\045\201\046\234\047\136\055" +
    "\173\056\203\057\236\061\177\063\204\064\170\100\200" +
    "\102\u010f\104\u013a\106\211\107\210\110\224\116\242\122" +
    "\225\123\241\124\344\126\u0110\127\u0112\131\227\132\223" +
    "\133\150\136\050\210\011\235\145\236\161\001\001\000" +
    "\002\001\001\000\014\047\136\110\u0138\133\150\235\145" +
    "\236\161\001\001\000\120\004\337\005\222\016\221\017" +
    "\212\020\207\021\230\022\220\023\247\030\214\032\233" +
    "\033\240\045\201\046\234\047\136\055\173\056\203\057" +
    "\236\061\177\063\204\064\170\100\200\102\u0135\106\211" +
    "\107\210\110\224\116\242\122\225\123\241\124\344\125" +
    "\u0133\126\342\131\227\132\223\133\150\136\050\155\u0134" +
    "\210\011\235\145\236\161\001\001\000\016\047\136\110" +
    "\u0132\133\150\200\u0131\235\145\236\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\142\004\337\005\222\016\221\017\212\020" +
    "\207\021\230\022\220\023\247\030\214\032\233\033\240" +
    "\043\016\045\201\046\234\047\136\050\255\053\254\055" +
    "\173\056\203\057\340\060\004\061\343\063\204\064\170" +
    "\074\072\077\071\100\200\106\211\107\210\110\224\116" +
    "\242\122\225\123\241\124\344\125\336\126\342\131\227" +
    "\132\223\133\150\136\050\145\070\151\034\152\062\153" +
    "\065\177\u0140\210\011\235\145\236\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\015\u015c\031" +
    "\130\044\156\047\136\051\u015f\052\256\110\155\133\150" +
    "\135\131\136\154\156\126\161\262\162\u015b\163\260\167" +
    "\265\205\157\211\140\213\151\214\125\235\145\236\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\102\015" +
    "\u014f\031\130\037\u0151\043\016\044\156\047\136\053\046" +
    "\057\053\060\004\061\015\074\072\077\071\110\155\133" +
    "\150\135\131\136\u0150\145\070\151\034\152\062\153\065" +
    "\156\126\162\132\202\u014e\205\157\206\056\207\047\210" +
    "\011\211\140\213\151\214\125\235\145\236\161\001\001" +
    "\000\016\044\u0154\135\257\136\154\211\140\213\151\214" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\037\u0151\043\016\053\046\057\053\060" +
    "\004\061\015\074\072\077\071\136\050\145\070\151\034" +
    "\152\062\153\065\202\u014e\206\056\207\047\210\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\112\u0156\113\101\141\063\143\020\001\001\000" +
    "\010\042\u0157\043\273\146\274\001\001\000\002\001\001" +
    "\000\046\037\u014c\043\016\053\046\057\053\060\004\061" +
    "\015\074\072\077\071\136\050\145\070\151\034\152\062" +
    "\153\065\202\u0149\206\056\207\047\210\011\220\u015a\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\031\u0165" +
    "\044\156\047\136\062\312\110\155\133\150\135\131\136" +
    "\154\156\162\161\311\162\u015b\167\313\205\157\211\140" +
    "\213\151\214\125\235\145\236\161\001\001\000\002\001" +
    "\001\000\014\047\136\110\u0162\133\150\235\145\236\161" +
    "\001\001\000\106\031\163\037\u014c\043\016\044\156\047" +
    "\136\053\046\057\053\060\004\061\015\074\072\077\071" +
    "\110\155\114\u0146\133\150\135\131\136\u0150\145\070\151" +
    "\034\152\062\153\065\156\162\162\132\202\u0149\205\157" +
    "\206\056\207\047\210\011\211\140\213\151\214\125\217" +
    "\u014a\220\u014b\235\145\236\161\001\001\000\002\001\001" +
    "\000\116\004\337\005\222\016\221\017\212\020\207\021" +
    "\230\022\220\023\247\030\214\032\233\033\240\045\201" +
    "\046\234\047\136\055\173\056\203\057\236\061\177\063" +
    "\204\064\170\100\200\102\u010f\106\211\107\210\110\224" +
    "\116\242\122\225\123\241\124\344\126\u0110\127\u0161\131" +
    "\227\132\223\133\150\136\050\210\011\235\145\236\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\116\004" +
    "\337\005\222\016\221\017\212\020\207\021\230\022\220" +
    "\023\247\030\214\032\233\033\240\045\201\046\234\047" +
    "\136\055\173\056\203\057\236\061\177\063\204\064\170" +
    "\100\200\102\u010f\106\211\107\210\110\224\116\242\122" +
    "\225\123\241\124\344\126\u0110\127\u0164\131\227\132\223" +
    "\133\150\136\050\210\011\235\145\236\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\015\u016c\031\130\044" +
    "\156\047\136\110\155\133\150\135\131\136\154\156\126" +
    "\162\132\205\157\211\140\213\151\214\125\235\145\236" +
    "\161\245\u016b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\116\004\337\005\222\016\221\017" +
    "\212\020\207\021\230\022\220\023\247\030\214\032\233" +
    "\033\240\045\201\046\234\047\136\055\173\056\203\057" +
    "\236\061\177\063\204\064\170\100\200\102\u010f\106\211" +
    "\107\210\110\224\116\242\122\225\123\241\124\344\126" +
    "\u0110\127\u016e\131\227\132\223\133\150\136\050\210\011" +
    "\235\145\236\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\u0173\036\u0175\001\001" +
    "\000\174\004\337\005\222\016\221\017\212\020\207\021" +
    "\230\022\220\023\247\030\214\032\233\033\240\036\u0193" +
    "\037\u0199\043\016\045\201\046\234\047\136\053\046\055" +
    "\173\056\203\057\340\060\004\061\343\063\204\064\170" +
    "\074\072\077\071\100\200\106\211\107\210\110\224\116" +
    "\242\120\u0192\121\052\122\225\123\241\124\344\125\u0191" +
    "\126\342\131\227\132\223\133\150\136\050\145\070\151" +
    "\034\152\062\153\065\165\025\206\056\207\047\210\011" +
    "\222\u0194\223\u01a5\225\u018e\226\u0195\227\u0190\230\u01a6\231" +
    "\u019e\233\u0196\235\145\236\161\001\001\000\002\001\001" +
    "\000\026\044\u017a\134\u0177\135\u0179\136\u017e\160\u017c\203" +
    "\u0178\204\u017d\211\140\213\151\214\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\u0189\001\001\000\002\001\001\000\004\135\u0188\001\001" +
    "\000\002\001\001\000\004\102\u0184\001\001\000\004\144" +
    "\u0181\001\001\000\002\001\001\000\026\044\u017a\134\u0177" +
    "\135\u0179\136\u017e\160\u017c\203\u0182\204\u017d\211\140\213" +
    "\151\214\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\144\u0183\001\001\000\002\001\001\000\002\001" +
    "\001\000\122\004\337\005\222\016\221\017\212\020\207" +
    "\021\230\022\220\023\247\030\214\032\233\033\240\045" +
    "\201\046\234\047\136\055\173\056\203\057\236\061\177" +
    "\063\204\064\170\100\200\102\u010f\104\u011a\106\211\107" +
    "\210\110\224\116\242\122\225\123\241\124\344\126\u0110" +
    "\127\u0112\131\227\132\223\133\150\136\050\147\u0186\210" +
    "\011\235\145\236\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\044" +
    "\u018b\135\u018c\136\154\211\140\213\151\214\125\001\001" +
    "\000\004\135\u018d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\172\004\337\005\222\016\221\017\212\020\207\021\230" +
    "\022\220\023\247\030\214\032\233\033\240\036\u0193\037" +
    "\u0199\043\016\045\201\046\234\047\136\053\046\055\173" +
    "\056\203\057\340\060\004\061\343\063\204\064\170\074" +
    "\072\077\071\100\200\106\211\107\210\110\224\116\242" +
    "\120\u0192\121\052\122\225\123\241\124\344\125\u0191\126" +
    "\342\131\227\132\223\133\150\136\050\145\070\151\034" +
    "\152\062\153\065\165\025\206\056\207\047\210\011\223" +
    "\u01e2\225\u018e\226\u0195\227\u0190\230\u01a6\231\u019e\233\u0196" +
    "\235\145\236\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\015\u016c" +
    "\031\130\044\156\047\136\110\155\133\150\135\131\136" +
    "\154\156\126\162\132\205\157\211\140\213\151\214\125" +
    "\235\145\236\161\244\153\245\142\001\001\000\002\001" +
    "\001\000\172\004\337\005\222\016\221\017\212\020\207" +
    "\021\230\022\220\023\247\030\214\032\233\033\240\036" +
    "\u0193\037\u0199\043\016\045\201\046\234\047\136\053\046" +
    "\055\173\056\203\057\340\060\004\061\343\063\204\064" +
    "\170\074\072\077\071\100\200\106\211\107\210\110\224" +
    "\116\242\120\u0192\121\052\122\225\123\241\124\344\125" +
    "\u0191\126\342\131\227\132\223\133\150\136\050\145\070" +
    "\151\034\152\062\153\065\165\025\206\056\207\047\210" +
    "\011\223\u01d5\225\u018e\226\u0195\227\u0190\230\u01a6\231\u019e" +
    "\233\u0196\235\145\236\161\001\001\000\002\001\001\000" +
    "\114\004\337\005\222\016\221\017\212\020\207\021\230" +
    "\022\220\023\247\030\214\032\233\033\240\045\201\046" +
    "\234\047\136\055\173\056\203\057\236\061\177\063\204" +
    "\064\170\100\200\106\211\107\210\110\224\116\242\122" +
    "\225\123\241\124\344\125\u01bf\126\342\131\227\132\223" +
    "\133\150\136\050\210\011\235\145\236\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\112\004" +
    "\206\005\222\016\221\017\212\020\207\021\230\022\220" +
    "\023\247\030\214\032\233\033\240\045\201\046\234\047" +
    "\136\054\u01a7\055\173\056\203\057\236\061\177\063\204" +
    "\064\170\100\200\106\211\107\210\110\224\116\242\122" +
    "\225\123\241\124\231\131\227\132\223\133\150\136\050" +
    "\210\011\235\145\236\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\172\004\337\005\222" +
    "\016\221\017\212\020\207\021\230\022\220\023\247\030" +
    "\214\032\233\033\240\036\u0193\037\u0199\043\016\045\201" +
    "\046\234\047\136\053\046\055\173\056\203\057\340\060" +
    "\004\061\343\063\204\064\170\074\072\077\071\100\200" +
    "\106\211\107\210\110\224\116\242\120\u0192\121\052\122" +
    "\225\123\241\124\344\125\u0191\126\342\131\227\132\223" +
    "\133\150\136\050\145\070\151\034\152\062\153\065\165" +
    "\025\206\056\207\047\210\011\223\u01a9\225\u018e\226\u0195" +
    "\227\u0190\230\u01a6\231\u019e\233\u0196\235\145\236\161\001" +
    "\001\000\002\001\001\000\150\004\337\005\222\016\221" +
    "\017\212\020\207\021\230\022\220\023\247\030\214\032" +
    "\233\033\240\037\u0151\043\016\045\201\046\234\047\136" +
    "\053\046\055\173\056\203\057\340\060\004\061\343\063" +
    "\204\064\170\074\072\077\071\100\200\106\211\107\210" +
    "\110\224\116\242\122\225\123\241\124\344\125\u01ab\126" +
    "\342\131\227\132\223\133\150\136\050\145\070\151\034" +
    "\152\062\153\065\202\u01ac\206\056\207\047\210\011\235" +
    "\145\236\161\242\u01ad\001\001\000\002\001\001\000\042" +
    "\015\u01b6\031\130\044\156\047\136\110\155\133\150\135" +
    "\131\136\154\156\126\162\132\205\157\211\140\213\151" +
    "\214\125\235\145\236\161\001\001\000\002\001\001\000" +
    "\004\261\u01af\001\001\000\172\004\337\005\222\016\221" +
    "\017\212\020\207\021\230\022\220\023\247\030\214\032" +
    "\233\033\240\036\u0193\037\u0199\043\016\045\201\046\234" +
    "\047\136\053\046\055\173\056\203\057\340\060\004\061" +
    "\343\063\204\064\170\074\072\077\071\100\200\106\211" +
    "\107\210\110\224\116\242\120\u0192\121\052\122\225\123" +
    "\241\124\344\125\u0191\126\342\131\227\132\223\133\150" +
    "\136\050\145\070\151\034\152\062\153\065\165\025\206" +
    "\056\207\047\210\011\223\u01b0\225\u018e\226\u0195\227\u0190" +
    "\230\u01a6\231\u019e\233\u0196\235\145\236\161\001\001\000" +
    "\004\262\u01b1\001\001\000\006\255\u01b3\263\u01b2\001\001" +
    "\000\002\001\001\000\002\001\001\000\172\004\337\005" +
    "\222\016\221\017\212\020\207\021\230\022\220\023\247" +
    "\030\214\032\233\033\240\036\u0193\037\u0199\043\016\045" +
    "\201\046\234\047\136\053\046\055\173\056\203\057\340" +
    "\060\004\061\343\063\204\064\170\074\072\077\071\100" +
    "\200\106\211\107\210\110\224\116\242\120\u0192\121\052" +
    "\122\225\123\241\124\344\125\u0191\126\342\131\227\132" +
    "\223\133\150\136\050\145\070\151\034\152\062\153\065" +
    "\165\025\206\056\207\047\210\011\223\u01b5\225\u018e\226" +
    "\u0195\227\u0190\230\u01a6\231\u019e\233\u0196\235\145\236\161" +
    "\001\001\000\002\001\001\000\004\102\u01b8\001\001\000" +
    "\116\004\337\005\222\016\221\017\212\020\207\021\230" +
    "\022\220\023\247\030\214\032\233\033\240\045\201\046" +
    "\234\047\136\055\173\056\203\057\236\061\177\063\204" +
    "\064\170\100\200\102\u010f\106\211\107\210\110\224\116" +
    "\242\122\225\123\241\124\344\126\u0110\127\u01b9\131\227" +
    "\132\223\133\150\136\050\210\011\235\145\236\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\172\004\337\005\222\016\221\017\212\020\207\021" +
    "\230\022\220\023\247\030\214\032\233\033\240\036\u0193" +
    "\037\u0199\043\016\045\201\046\234\047\136\053\046\055" +
    "\173\056\203\057\340\060\004\061\343\063\204\064\170" +
    "\074\072\077\071\100\200\106\211\107\210\110\224\116" +
    "\242\120\u0192\121\052\122\225\123\241\124\344\125\u0191" +
    "\126\342\131\227\132\223\133\150\136\050\145\070\151" +
    "\034\152\062\153\065\165\025\206\056\207\047\210\011" +
    "\223\u01bc\225\u018e\226\u0195\227\u0190\230\u01a6\231\u019e\233" +
    "\u0196\235\145\236\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\156\004\337\005\222\016\221\017\212\020\207" +
    "\021\230\022\220\023\247\030\214\032\233\033\240\037" +
    "\u0199\043\016\045\201\046\234\047\136\050\u01c2\053\u01c6" +
    "\055\173\056\203\057\340\060\004\061\343\063\204\064" +
    "\170\074\072\077\071\100\200\106\211\107\210\110\224" +
    "\116\242\122\225\123\241\124\344\125\u0191\126\342\131" +
    "\227\132\223\133\150\136\050\145\070\151\034\152\062" +
    "\153\065\165\u01c5\206\056\207\047\210\011\233\u01c3\235" +
    "\145\236\161\251\u01c7\254\u01c4\001\001\000\042\015\u01d4" +
    "\031\130\044\156\047\136\110\155\133\150\135\131\136" +
    "\154\156\126\162\132\205\157\211\140\213\151\214\125" +
    "\235\145\236\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\043\016\050\316\053\254" +
    "\057\053\060\004\061\015\074\072\077\071\111\315\136" +
    "\050\145\070\151\034\152\062\153\065\210\011\001\001" +
    "\000\152\004\337\005\222\016\221\017\212\020\207\021" +
    "\230\022\220\023\247\030\214\032\233\033\240\037\u0151" +
    "\043\016\045\201\046\234\047\136\053\046\055\173\056" +
    "\203\057\340\060\004\061\343\063\204\064\170\074\072" +
    "\077\071\100\200\106\211\107\210\110\224\116\242\122" +
    "\225\123\241\124\344\125\u01ab\126\342\131\227\132\223" +
    "\133\150\136\050\145\070\151\034\152\062\153\065\202" +
    "\u01ac\206\056\207\047\210\011\235\145\236\161\242\u01c8" +
    "\243\u01c9\001\001\000\002\001\001\000\002\001\001\000" +
    "\116\004\337\005\222\016\221\017\212\020\207\021\230" +
    "\022\220\023\247\030\214\032\233\033\240\045\201\046" +
    "\234\047\136\055\173\056\203\057\236\061\177\063\204" +
    "\064\170\100\200\106\211\107\210\110\224\116\242\122" +
    "\225\123\241\124\344\125\u0191\126\342\131\227\132\223" +
    "\133\150\136\050\210\011\233\u01cb\235\145\236\161\001" +
    "\001\000\002\001\001\000\172\004\337\005\222\016\221" +
    "\017\212\020\207\021\230\022\220\023\247\030\214\032" +
    "\233\033\240\036\u0193\037\u0199\043\016\045\201\046\234" +
    "\047\136\053\046\055\173\056\203\057\340\060\004\061" +
    "\343\063\204\064\170\074\072\077\071\100\200\106\211" +
    "\107\210\110\224\116\242\120\u0192\121\052\122\225\123" +
    "\241\124\344\125\u0191\126\342\131\227\132\223\133\150" +
    "\136\050\145\070\151\034\152\062\153\065\165\025\206" +
    "\056\207\047\210\011\223\u01cd\225\u018e\226\u0195\227\u0190" +
    "\230\u01a6\231\u019e\233\u0196\235\145\236\161\001\001\000" +
    "\002\001\001\000\116\004\337\005\222\016\221\017\212" +
    "\020\207\021\230\022\220\023\247\030\214\032\233\033" +
    "\240\045\201\046\234\047\136\055\173\056\203\057\236" +
    "\061\177\063\204\064\170\100\200\106\211\107\210\110" +
    "\224\116\242\122\225\123\241\124\344\125\u01d0\126\342" +
    "\131\227\132\223\133\150\136\050\210\011\235\145\236" +
    "\161\253\u01cf\001\001\000\002\001\001\000\004\102\u01d1" +
    "\001\001\000\002\001\001\000\172\004\337\005\222\016" +
    "\221\017\212\020\207\021\230\022\220\023\247\030\214" +
    "\032\233\033\240\036\u0193\037\u0199\043\016\045\201\046" +
    "\234\047\136\053\046\055\173\056\203\057\340\060\004" +
    "\061\343\063\204\064\170\074\072\077\071\100\200\106" +
    "\211\107\210\110\224\116\242\120\u0192\121\052\122\225" +
    "\123\241\124\344\125\u0191\126\342\131\227\132\223\133" +
    "\150\136\050\145\070\151\034\152\062\153\065\165\025" +
    "\206\056\207\047\210\011\223\u01d3\225\u018e\226\u0195\227" +
    "\u0190\230\u01a6\231\u019e\233\u0196\235\145\236\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\114\004\337\005\222\016\221\017\212" +
    "\020\207\021\230\022\220\023\247\030\214\032\233\033" +
    "\240\045\201\046\234\047\136\055\173\056\203\057\236" +
    "\061\177\063\204\064\170\100\200\106\211\107\210\110" +
    "\224\116\242\122\225\123\241\124\344\125\u01d8\126\342" +
    "\131\227\132\223\133\150\136\050\210\011\235\145\236" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\150\004\337\005\222\016\221\017\212\020" +
    "\207\021\230\022\220\023\247\030\214\032\233\033\240" +
    "\037\u0151\043\016\045\201\046\234\047\136\053\046\055" +
    "\173\056\203\057\340\060\004\061\343\063\204\064\170" +
    "\074\072\077\071\100\200\106\211\107\210\110\224\116" +
    "\242\122\225\123\241\124\344\125\u01ab\126\342\131\227" +
    "\132\223\133\150\136\050\145\070\151\034\152\062\153" +
    "\065\202\u01ac\206\056\207\047\210\011\235\145\236\161" +
    "\242\u01dc\001\001\000\002\001\001\000\172\004\337\005" +
    "\222\016\221\017\212\020\207\021\230\022\220\023\247" +
    "\030\214\032\233\033\240\036\u0193\037\u0199\043\016\045" +
    "\201\046\234\047\136\053\046\055\173\056\203\057\340" +
    "\060\004\061\343\063\204\064\170\074\072\077\071\100" +
    "\200\106\211\107\210\110\224\116\242\120\u0192\121\052" +
    "\122\225\123\241\124\344\125\u0191\126\342\131\227\132" +
    "\223\133\150\136\050\145\070\151\034\152\062\153\065" +
    "\165\025\206\056\207\047\210\011\223\u01de\225\u018e\226" +
    "\u0195\227\u0190\230\u01a6\231\u019e\233\u0196\235\145\236\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\172\004\337\005\222\016\221\017\212\020\207\021" +
    "\230\022\220\023\247\030\214\032\233\033\240\036\u0193" +
    "\037\u0199\043\016\045\201\046\234\047\136\053\046\055" +
    "\173\056\203\057\340\060\004\061\343\063\204\064\170" +
    "\074\072\077\071\100\200\106\211\107\210\110\224\116" +
    "\242\120\u0192\121\052\122\225\123\241\124\344\125\u0191" +
    "\126\342\131\227\132\223\133\150\136\050\145\070\151" +
    "\034\152\062\153\065\165\025\206\056\207\047\210\011" +
    "\223\u01e5\225\u018e\226\u0195\227\u0190\230\u01a6\231\u019e\233" +
    "\u0196\235\145\236\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\240" +
    "\u01ea\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\044\u01f0\135\u01ef\136\154\211\140\212" +
    "\u01ee\213\151\214\125\001\001\000\004\135\u01f1\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\042\u01f3\043\273\146\274\001\001\000\002\001\001" +
    "\000\004\040\u01f5\001\001\000\002\001\001\000\114\004" +
    "\337\005\222\016\221\017\212\020\207\021\230\022\220" +
    "\023\247\030\214\032\233\033\240\045\201\046\234\047" +
    "\136\055\173\056\203\057\236\061\177\063\204\064\170" +
    "\100\200\106\211\107\210\110\224\116\242\122\225\123" +
    "\241\124\344\125\u01f7\126\342\131\227\132\223\133\150" +
    "\136\050\210\011\235\145\236\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\070\012\060" +
    "\037\054\043\016\053\046\057\053\060\004\061\015\074" +
    "\072\077\071\113\074\120\012\121\052\136\050\141\063" +
    "\143\020\145\070\151\034\152\062\153\065\157\006\164" +
    "\037\165\025\175\u01fc\176\061\206\056\207\047\210\011" +
    "\001\001\000\046\014\u01fd\037\u0151\043\016\053\046\057" +
    "\053\060\004\061\015\074\072\077\071\136\050\145\070" +
    "\151\034\152\062\153\065\202\u01fe\206\056\207\047\210" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\043\016\050\255\053" +
    "\254\057\053\060\004\061\015\074\072\077\071\136\050" +
    "\145\070\151\034\152\062\153\065\177\u0201\210\011\001" +
    "\001\000\004\144\u0202\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\006\u020a\065\u0206\070\u0205\072\u0208\142" +
    "\u0209\001\001\000\002\001\001\000\006\066\u0215\067\u0217" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\u020f\065\u0206\070\u0205" +
    "\072\u020e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\u021c\071\u0218\150\u021a" +
    "\001\001\000\002\001\001\000\006\010\u0220\150\u021a\001" +
    "\001\000\010\010\u021c\071\u0223\150\u021a\001\001\000\002" +
    "\001\001\000\010\010\u021c\071\u0221\150\u021a\001\001\000" +
    "\002\001\001\000\010\010\u021c\071\u021e\150\u021a\001\001" +
    "\000\006\010\u0220\150\u021a\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\u0220\150\u021a\001\001\000\002" +
    "\001\001\000\006\010\u0220\150\u021a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\043\016" +
    "\050\255\053\254\057\053\060\004\061\015\074\072\077" +
    "\071\136\050\145\070\151\034\152\062\153\065\177\u0228" +
    "\210\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\135\257\211\u022b\213\151\214\125\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 SemanticAnalysis.parser = this;              
    }


    
    public void report_error(String message, Object info) {
   
        StringBuffer m = new StringBuffer("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   

        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // overloadableOperator ::= NEW 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("overloadableOperator",154, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // dotsOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dotsOpt",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // dotsOpt ::= DOTS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dotsOpt",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // emptyDeclaration ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("emptyDeclaration",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // alignmentSpec ::= ALIGNAS LPAR typeId dotsOpt RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alignmentSpec",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // balancedToken ::= token 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("balancedToken",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // balancedToken ::= LBRK balancedTokenSeq RBRK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("balancedToken",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // balancedToken ::= LSQRBRK balancedTokenSeq RSQRBRK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("balancedToken",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // balancedToken ::= LPAR balancedTokenSeq RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("balancedToken",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // balancedTokenSeq ::= balancedTokenSeq balancedToken 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("balancedTokenSeq",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // balancedTokenSeq ::= balancedToken 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("balancedTokenSeq",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // attributeArgCls ::= LPAR balancedTokenSeq RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeArgCls",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // attributeScopedToken ::= IDENTIFIER COLON COLON IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeScopedToken",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // attributeToken ::= attributeScopedToken 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeToken",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // attributeToken ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeToken",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // attributeArgClsOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeArgClsOpt",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // attributeArgClsOpt ::= attributeArgCls 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeArgClsOpt",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // attribute ::= attributeToken attributeArgClsOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attribute",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // attributeOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeOpt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // attributeOpt ::= attribute 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeOpt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // attributeList ::= attributeList COMMA attributeOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeList",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // attributeList ::= attributeOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeList",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // attributeList ::= attributeList COMMA attribute DOTS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeList",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // attributeList ::= attribute DOTS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeList",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // attributeSpec ::= alignmentSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeSpec",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // attributeSpec ::= LSQRBRK LSQRBRK attributeList RSQRBRK RSQRBRK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeSpec",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // attributeSpecSeq ::= attributeSpecSeq attributeSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeSpecSeq",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // attributeSpecSeq ::= attributeSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeSpecSeq",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // attributeSpecSeqOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeSpecSeqOpt",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // attributeSpecSeqOpt ::= attributeSpecSeq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeSpecSeqOpt",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // declTypeSpec ::= DECLTYPE LPAR expr RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declTypeSpec",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // className ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("className",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // classOrDeclType ::= declTypeSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classOrDeclType",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // classOrDeclType ::= className 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classOrDeclType",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // classOrDeclType ::= COLON COLON className 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classOrDeclType",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // classOrDeclType ::= nestedNameSpec className 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classOrDeclType",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // classOrDeclType ::= COLON COLON nestedNameSpec className 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classOrDeclType",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // accessSpec ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accessSpec",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // accessSpec ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accessSpec",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // accessSpec ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accessSpec",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // accessSpecOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accessSpecOpt",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // accessSpecOpt ::= accessSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("accessSpecOpt",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // classVirtSpec ::= EXPLICIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classVirtSpec",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // classVirtSpec ::= FINAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classVirtSpec",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // classVirtSpecSeq ::= classVirtSpecSeq classVirtSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classVirtSpecSeq",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // classVirtSpecSeq ::= classVirtSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classVirtSpecSeq",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // classVirtSpecSeqOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classVirtSpecSeqOpt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // classVirtSpecSeqOpt ::= classVirtSpecSeq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classVirtSpecSeqOpt",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // classKey ::= UNION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classKey",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // classKey ::= STRUCT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classKey",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // classKey ::= CLASS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classKey",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // classHead2 ::= classHeadName classVirtSpecSeqOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classHead2",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // classHead ::= classKey attributeSpecSeqOpt classHead2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classHead",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // memberSpecificationOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("memberSpecificationOpt",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // memberSpecificationOpt ::= memberSpecification 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("memberSpecificationOpt",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // classSpec ::= classHead LBRK memberSpecificationOpt RBRK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classSpec",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // trailingTypeSpec ::= cvQualifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trailingTypeSpec",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // trailingTypeSpec ::= typenameSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trailingTypeSpec",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // trailingTypeSpec ::= elaboratedTypeSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trailingTypeSpec",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // trailingTypeSpec ::= simpleTypeSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trailingTypeSpec",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // enumSpec ::= enumHead LBRK enumList COMMA RBRK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enumSpec",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // enumSpec ::= enumHead LBRK enumListOpt RBRK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enumSpec",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // typeSpec ::= enumSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeSpec",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // typeSpec ::= classSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeSpec",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // typeSpec ::= trailingTypeSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeSpec",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // typeSpecSeq2 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeSpecSeq2",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // typeSpecSeq2 ::= typeSpecSeq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeSpecSeq2",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // typeSpecSeq ::= typeSpec typeSpecSeq2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeSpecSeq",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // ptrOperator ::= nestedNameSpec SINGLEAND attributeSpecSeqOpt cvQualifierSeqOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ptrOperator",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // ptrOperator ::= SEPPTR nestedNameSpec SINGLEAND attributeSpecSeqOpt cvQualifierSeqOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ptrOperator",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // ptrOperator ::= DOUBLEAND attributeSpecSeqOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ptrOperator",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // ptrOperator ::= SINGLEAND attributeSpecSeqOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ptrOperator",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // ptrOperator ::= STAR attributeSpecSeqOpt cvQualifierSeqOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ptrOperator",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // ptrAbstractDeclaratorOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ptrAbstractDeclaratorOpt",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // ptrAbstractDeclaratorOpt ::= ptrAbstractDeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ptrAbstractDeclaratorOpt",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // ptrAbstractDeclarator ::= ptrOperator ptrAbstractDeclaratorOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ptrAbstractDeclarator",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // ptrAbstractDeclarator ::= noPtrAbstractDeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ptrAbstractDeclarator",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // trailingTypeSpecSeq ::= trailingTypeSpec trailingTypeSpecSeq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trailingTypeSpecSeq",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // trailingTypeSpecSeq ::= trailingTypeSpec attributeSpecSeqOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trailingTypeSpecSeq",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // trailingReturnType ::= ARROW trailingTypeSpecSeq abstractDeclaratorOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trailingReturnType",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // cvQualifier ::= VOLATILE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvQualifier",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // cvQualifier ::= CONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvQualifier",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // cvQualifierSeq ::= cvQualifier cvQualifierSeq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvQualifierSeq",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // cvQualifierSeq ::= cvQualifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvQualifierSeq",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // refQualifier ::= DOUBLEAND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("refQualifier",118, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // refQualifier ::= SINGLEAND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("refQualifier",118, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // refQualifierOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("refQualifierOpt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // refQualifierOpt ::= refQualifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("refQualifierOpt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // typeIdList ::= typeIdList COMMA typeId dotsOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeIdList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // typeIdList ::= typeId dotsOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeIdList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // typeIdListOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeIdListOpt",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // typeIdListOpt ::= typeIdList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeIdListOpt",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // exprListOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprListOpt",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // exprListOpt ::= initializeList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprListOpt",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // bracedInitListOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bracedInitListOpt",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // bracedInitListOpt ::= bracedInitList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bracedInitListOpt",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // stringLiteral ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("628 " + s); RESULT = new Expression(new Type("string"), s.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stringLiteral",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // pointerLiteral ::= NULLPTR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointerLiteral",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // booleanLiteral ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("687 " + f); RESULT = new Expression(new Type("bool"), f.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("booleanLiteral",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // booleanLiteral ::= TRUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("686 " + t); RESULT = new Expression(new Type("bool"), t.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("booleanLiteral",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // integerLiteral ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("584 " + i); RESULT = new Expression(new Type("int"), i.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integerLiteral",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // literal ::= userDefinedLiteral 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // literal ::= pointerLiteral 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // literal ::= booleanLiteral 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("579 " + b); RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // literal ::= stringLiteral 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("578 " + s); RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // literal ::= floatingLiteral 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // literal ::= characterLiteral 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("576 " + c); RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // literal ::= integerLiteral 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("575 " + i); RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // jumpStatement ::= GOTO IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jumpStatement",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // jumpStatement ::= RETURN expr SEMICOLON 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.print("****"); SemanticAnalysis.getInstance().checkReturnedType(e); SemanticAnalysis.getInstance().toAssembly(SemanticAnalysis.labels+8+": BR *0(SP)"); SemanticAnalysis.labels = SemanticAnalysis.labels +8; Logger.print("448 RETURN expr ; " + e); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jumpStatement",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // jumpStatement ::= RETURN SEMICOLON 
            {
              Object RESULT =null;
		 Logger.print("568 BREAK ;"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jumpStatement",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // jumpStatement ::= CONTINUE SEMICOLON 
            {
              Object RESULT =null;
		 Logger.print("567 CONTINUE ;"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jumpStatement",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // jumpStatement ::= BREAK SEMICOLON 
            {
              Object RESULT =null;
		 Logger.print("566 BREAK ;"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("jumpStatement",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // forInitStatement ::= simpleDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forInitStatement",167, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // forInitStatement ::= exprOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forInitStatement",167, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // forRangeInitializer ::= expr bracedInitList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forRangeInitializer",169, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // forRangeDeclaration ::= typeSpecSeq declarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forRangeDeclaration",170, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // iterationStatement ::= FOR LPAR forRangeDeclaration COLON forRangeInitializer RPAR statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterationStatement",148, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // iterationStatement ::= FOR LPAR forInitStatement conditionOpt SEMICOLON exprOpt RPAR statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterationStatement",148, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // iterationStatement ::= DO statement WHILE LPAR expr RPAR SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterationStatement",148, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // iterationStatement ::= WHILE LPAR condition RPAR statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterationStatement",148, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // conditionOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionOpt",161, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // conditionOpt ::= condition 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionOpt",161, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // condition ::= declSpecSeq declarator bracedInitList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",160, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // condition ::= declSpecSeq declarator ASSIGNMENT initializeCls 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",160, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // condition ::= expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("condition->expression " + e); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",160, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // ruleAux ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ruleAux",171, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // ruleAux ::= NT$3 ELSE statement 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 SemanticAnalysis.getInstance().exitCurrentScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ruleAux",171, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // NT$3 ::= 
            {
              Object RESULT =null;
 Logger.print("568 else condition "); SemanticAnalysis.getInstance().createElse(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",177, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // selectionStatement ::= IF LPAR condition RPAR NT$1 statement NT$2 ruleAux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("selectionStatement",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 SemanticAnalysis.getInstance().exitCurrentScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",176, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // NT$1 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
 Logger.print("551 if condition "); SemanticAnalysis.getInstance().createIf((Expression) c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",175, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // exprOpt ::= expr SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprOpt",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // exprOpt ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprOpt",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // labeledStatement ::= DEFAULT COLON statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labeledStatement",151, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // labeledStatement ::= CASE constExpr COLON statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labeledStatement",151, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // labeledStatement ::= IDENTIFIER COLON statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("labeledStatement",151, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // statement ::= tryBlock 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s;  Logger.print("530 tryBlock_statement: " + s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // statement ::= blockDeclaration 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("ANTES 529 blockDeclaration_statement");  RESULT = s;  Logger.print("529 blockDeclaration_statement: " + s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // statement ::= jumpStatement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s;  Logger.print("528 jump_statement: " + s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // statement ::= iterationStatement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s;  Logger.print("527 iteration_statement: " + s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // statement ::= selectionStatement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("ANTES 529 selection"); RESULT = s;  Logger.print("526 selection_statement: " + s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // statement ::= compoundStatement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("ANTES 529 compound"); RESULT = s;  Logger.print("525 compound_statement: " + s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // statement ::= exprOpt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("ANTES 529 expression"); RESULT = s;  Logger.print("524 exprOpt_statement: " + s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // statement ::= labeledStatement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("ANTES 529 labeled"); RESULT = s;  Logger.print("523 labeled_statement: " + s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // statementSeq ::= statementSeq statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementSeq",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // statementSeq ::= statement 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s;  Logger.print("519 statement " + s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementSeq",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // statementSeqOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementSeqOpt",143, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // statementSeqOpt ::= statementSeq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statementSeqOpt",143, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // compoundStatement ::= LBRK statementSeq RBRK 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s;  Logger.print("514 statementSeq" + s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compoundStatement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // compoundStatement ::= LBRK RBRK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compoundStatement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // lambdaExpr ::= lambdaIntroducer lambdaDeclaratorOpt compoundStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lambdaExpr",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // primaryExpr ::= idExpr 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("502 " + i); RESULT = SemanticAnalysis.getInstance().getIdentifier((String) i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // primaryExpr ::= LPAR expr RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e;  Logger.print("501 expression" + e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // primaryExpr ::= THIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // primaryExpr ::= literal 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l;  Logger.print("499 literal" + l); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // conversionTypeId ::= typeSpecSeq conversionDeclaratorOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conversionTypeId",157, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // conversionFunctionId ::= OPERATOR conversionTypeId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conversionFunctionId",156, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // operatorFunctionId ::= OPERATOR overloadableOperator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operatorFunctionId",155, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // unqualifiedId ::= BINNEG className 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unqualifiedId",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // unqualifiedId ::= conversionFunctionId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unqualifiedId",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // unqualifiedId ::= operatorFunctionId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unqualifiedId",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // unqualifiedId ::= IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("475 identifier " + i ); RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unqualifiedId",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // idExpr ::= qualifiedId 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idExpr",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // idExpr ::= unqualifiedId 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("471 unqualifiedID " + u ); RESULT = u; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idExpr",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // postfixExpr ::= postfixExpr AUTODECRM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // postfixExpr ::= postfixExpr AUTOINCRM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // postfixExpr ::= postfixExpr DOT pseudoDestructorName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // postfixExpr ::= postfixExpr ARROW idExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // postfixExpr ::= postfixExpr DOT idExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // postfixExpr ::= typenameSpec bracedInitList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // postfixExpr ::= simpleTypeSpec bracedInitList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // postfixExpr ::= typenameSpec LPAR exprListOpt RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // postfixExpr ::= simpleTypeSpec LPAR exprListOpt RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // postfixExpr ::= postfixExpr LPAR initializeList RPAR 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.print("465 " + p + " " + i); SemanticAnalysis.getInstance().checkFunctionCallException(((Function) p).getName(), Util.convertToTypeArray((ArrayList<Expression>) i)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // postfixExpr ::= postfixExpr LPAR RPAR 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Logger.print("464 " + p); SemanticAnalysis.getInstance().isFunction(p); SemanticAnalysis.getInstance().checkFunctionCallException(((Function) p).getName()); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // postfixExpr ::= postfixExpr LSQRBRK bracedInitListOpt RSQRBRK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // postfixExpr ::= postfixExpr LSQRBRK expr RSQRBRK 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.print("462 " + e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // postfixExpr ::= primaryExpr 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("461 " + p); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // unaryOp ::= BINNEG 
            {
              Object RESULT =null;
		 RESULT = new Node("~", "primario"); Logger.print("~");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryOp",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // unaryOp ::= LOGNEGATION 
            {
              Object RESULT =null;
		 RESULT = new Node("!", "primario"); Logger.print("!");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryOp",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // unaryOp ::= MINUSOP 
            {
              Object RESULT =null;
		 RESULT = new Node("-", "primario"); Logger.print("-");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryOp",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // unaryOp ::= PLUSOP 
            {
              Object RESULT =null;
		 RESULT = new Node("+", "primario"); Logger.print("+");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryOp",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // unaryOp ::= SINGLEAND 
            {
              Object RESULT =null;
		 RESULT = new Node("&", "primario"); Logger.print("&"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryOp",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // unaryOp ::= STAR 
            {
              Object RESULT =null;
		 RESULT = new Node("*", "primario"); Logger.print("*");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryOp",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // unaryExpr ::= deleteExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // unaryExpr ::= newExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // unaryExpr ::= ALIGNOF LPAR typeId RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // unaryExpr ::= SIZEOF DOTS LPAR IDENTIFIER RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // unaryExpr ::= SIZEOF LPAR typeId RPAR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.print("97 " + t); RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // unaryExpr ::= SIZEOF unaryExpr 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("445 " + u); RESULT = u; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // unaryExpr ::= unaryOp castExpr 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("444 " + u + " " + c); RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // unaryExpr ::= AUTODECRM castExpr 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("443 " + c); RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // unaryExpr ::= AUTOINCRM castExpr 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("442 " + c); RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // unaryExpr ::= postfixExpr 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("441 " + p); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // castExpr ::= LPAR typeId RPAR castExpr 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("438 " + t + " " + c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("castExpr",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // castExpr ::= unaryExpr 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("437 " + u); RESULT = u; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("castExpr",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // pmExpr ::= pmExpr ARROWSTAR castExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pmExpr",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // pmExpr ::= pmExpr DOTSTAR castExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pmExpr",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // pmExpr ::= castExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pmExpr",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // multExpr ::= multExpr MODOP castExpr 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("429 " + m + " " + c); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.PERC, (Expression) m, (Expression) c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multExpr",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // multExpr ::= multExpr DIVOP castExpr 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("428 " + m + " " + c); SemanticAnalysis.AssemblyGenerator(Operation.DIV, (Expression) m, (Expression) c); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.DIV, (Expression) m, (Expression) c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multExpr",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // multExpr ::= multExpr STAR castExpr 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("427 " + m + " " + c); SemanticAnalysis.AssemblyGenerator(Operation.MULT, (Expression) m, (Expression) c); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.MULT, (Expression) m, (Expression) c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multExpr",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // multExpr ::= castExpr 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("426 " + p); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multExpr",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // additiveExpr ::= additiveExpr MINUSOP multExpr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("422 " + a + " " + m); SemanticAnalysis.AssemblyGenerator(Operation.MINUS, (Expression) a, (Expression) m); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.MINUS, (Expression) a, (Expression) m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additiveExpr",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // additiveExpr ::= additiveExpr PLUSOP multExpr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("421 " + a + " " + m); SemanticAnalysis.AssemblyGenerator(Operation.PLUS, (Expression) a, (Expression) m); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.PLUS, (Expression) a, (Expression) m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additiveExpr",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // additiveExpr ::= multExpr 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("420 " + m); RESULT = m; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additiveExpr",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // shiftExpr ::= shiftExpr RSHIFT additiveExpr 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("417 " + s + " " + a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shiftExpr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // shiftExpr ::= shiftExpr LSHIFT additiveExpr 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("416 " + s + " " + a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shiftExpr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // shiftExpr ::= additiveExpr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("415 " + a); RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("shiftExpr",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // relationalExpr ::= relationalExpr GTE shiftExpr 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("412 " + r + " " + s); SemanticAnalysis.AssemblyGenerator(Operation.GE_OP, (Expression) r, (Expression) s); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.GE_OP, (Expression) r, (Expression) s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationalExpr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // relationalExpr ::= relationalExpr LTE shiftExpr 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("411 " + r + " " + s); SemanticAnalysis.AssemblyGenerator(Operation.LE_OP, (Expression) r, (Expression) s); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.LE_OP, (Expression) r, (Expression) s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationalExpr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // relationalExpr ::= relationalExpr GT shiftExpr 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("410 " + r + " " + s); SemanticAnalysis.AssemblyGenerator(Operation.MORE_THAN, (Expression) r, (Expression) s); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.MORE_THAN, (Expression) r, (Expression) s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationalExpr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // relationalExpr ::= relationalExpr LT shiftExpr 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("409 " + r + " " + s); SemanticAnalysis.AssemblyGenerator(Operation.LESS_THAN, (Expression) r, (Expression) s); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.LESS_THAN, (Expression) r, (Expression) s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationalExpr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // relationalExpr ::= shiftExpr 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("408 " + s); RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relationalExpr",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // equalityExpr ::= equalityExpr NEQOP relationalExpr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("405 " + e + " " + r); SemanticAnalysis.AssemblyGenerator(Operation.NE_OP, (Expression) e, (Expression) r); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.NE_OP, (Expression) e, (Expression) r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equalityExpr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // equalityExpr ::= equalityExpr EQOP relationalExpr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("404 " + e + " " + r); SemanticAnalysis.AssemblyGenerator(Operation.EQ_OP, (Expression) e, (Expression) r); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.EQ_OP, (Expression) e, (Expression) r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equalityExpr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // equalityExpr ::= relationalExpr 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("403 " + r); RESULT = r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equalityExpr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // andExpr ::= andExpr SINGLEAND equalityExpr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("400 " + a + " " + e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("andExpr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // andExpr ::= equalityExpr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("399 " + e); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("andExpr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // exclusiveOrExpr ::= exclusiveOrExpr XOROP andExpr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("396 " + e + " " + a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exclusiveOrExpr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // exclusiveOrExpr ::= andExpr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("395 " + a); RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exclusiveOrExpr",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // inclusiveOrExpr ::= inclusiveOrExpr SOROP exclusiveOrExpr 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("392 " + i + " " + e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inclusiveOrExpr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // inclusiveOrExpr ::= exclusiveOrExpr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("391 " + e); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inclusiveOrExpr",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // logicalAndExpr ::= logicalAndExpr DOUBLEAND inclusiveOrExpr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("388 " + l + " " + i); SemanticAnalysis.AssemblyGenerator(Operation.AND_OP, (Expression) l, (Expression) i); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.AND_OP, (Expression) l, (Expression) i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicalAndExpr",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // logicalAndExpr ::= inclusiveOrExpr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("387 " + e); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicalAndExpr",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // logicalOrExpr ::= logicalOrExpr OROP logicalAndExpr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("384 " + l + " " + e); SemanticAnalysis.AssemblyGenerator(Operation.OR_OP, (Expression) l, (Expression) e); RESULT = SemanticAnalysis.getInstance().getExpressionForOperation(Operation.OR_OP, (Expression) l, (Expression) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicalOrExpr",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // logicalOrExpr ::= logicalAndExpr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("383 " + l); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logicalOrExpr",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // commaOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commaOpt",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // commaOpt ::= COMMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("commaOpt",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // initializeList ::= initializeList COMMA initializeCls 
            {
              Object RESULT =null;
		int iListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object iList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ((ArrayList<Expression>) iList).add((Expression)i); RESULT = iList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializeList",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // initializeList ::= initializeCls 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = Util.newList((Expression) i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializeList",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // bracedInitList ::= LBRK RBRK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bracedInitList",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // bracedInitList ::= LBRK initializeList commaOpt RBRK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bracedInitList",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // initializeCls ::= bracedInitList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializeCls",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // initializeCls ::= assignmentExpr 
            {
              Object RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ae = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("370 assignExpr " + ae); RESULT = ae; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializeCls",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // assignmentOperator ::= ORASSIGN 
            {
              Object RESULT =null;
		 RESULT = new Node("|=", "primario"); Logger.print("|=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentOperator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // assignmentOperator ::= XORASSIGN 
            {
              Object RESULT =null;
		 RESULT = new Node("^=", "primario"); Logger.print("^=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentOperator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // assignmentOperator ::= ANDASSIGN 
            {
              Object RESULT =null;
		 RESULT = new Node("&=", "primario"); Logger.print("&=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentOperator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // assignmentOperator ::= LSHIFTASSIGN 
            {
              Object RESULT =null;
		 RESULT = new Node("<<=","primario"); Logger.print("<<=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentOperator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // assignmentOperator ::= RSHIFTASSIGN 
            {
              Object RESULT =null;
		 RESULT = new Node(">>=","primario"); Logger.print(">>=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentOperator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // assignmentOperator ::= MINUSASSIGN 
            {
              Object RESULT =null;
		 RESULT = new Node("-=", "primario"); Logger.print("-=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentOperator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // assignmentOperator ::= PLUSASSIGN 
            {
              Object RESULT =null;
		 RESULT = new Node("+=", "primario"); Logger.print("+=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentOperator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // assignmentOperator ::= MODASSIGN 
            {
              Object RESULT =null;
		 RESULT = new Node("%=", "primario"); Logger.print("%=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentOperator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // assignmentOperator ::= DIVASSIGN 
            {
              Object RESULT =null;
		 RESULT = new Node("/=", "primario"); Logger.print("/=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentOperator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // assignmentOperator ::= MULTASSIGN 
            {
              Object RESULT =null;
		 RESULT = new Node("*=", "primario"); Logger.print("*=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentOperator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // assignmentOperator ::= ASSIGNMENT 
            {
              Object RESULT =null;
		 RESULT = new Node("=", "primario");  Logger.print("=");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentOperator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // assignmentExpr ::= logicalOrExpr assignmentOperator initializeCls 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("352 logicalOrExpr: " + u + " assignOp: " + o + " initializeCls" + e); if(!e.equals("null")){SemanticAnalysis.getInstance().toAssembly(SemanticAnalysis.labels+8+": ST " + u + ", R1");SemanticAnalysis.labels= SemanticAnalysis.labels+8;}else{SemanticAnalysis.getInstance().toAssembly(SemanticAnalysis.labels+8+": ST " + u + ", " + e);SemanticAnalysis.labels= SemanticAnalysis.labels+8;}; RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentExpr",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // assignmentExpr ::= conditionalExpr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("351 conditionExpr " + e); RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentExpr",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // assignmentExprOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentExprOpt",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // assignmentExprOpt ::= assignmentExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignmentExprOpt",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // conditionalExpr ::= logicalOrExpr QUESTION expr COLON assignmentExpr 
            {
              Object RESULT =null;
		 Logger.print("345"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionalExpr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // conditionalExpr ::= logicalOrExpr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("344 logicalOrExpr " + l); RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditionalExpr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // constExpr ::= conditionalExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constExpr",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expr ::= expr COMMA assignmentExpr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("339 expr: " + e + " assignExpr: " + a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expr ::= assignmentExpr 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("338 assignmentExpr " + a); RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // cvQualifierSeqOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvQualifierSeqOpt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // cvQualifierSeqOpt ::= cvQualifierSeq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cvQualifierSeqOpt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // paramDeclaration ::= declSpecSeq abstractDeclaratorOpt ASSIGNMENT initializeCls 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramDeclaration",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // paramDeclaration ::= declSpecSeq abstractDeclaratorOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramDeclaration",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // paramDeclaration ::= declSpecSeq declarator ASSIGNMENT initializeCls 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramDeclaration",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // paramDeclaration ::= declSpec declarator 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int deleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object de = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("323 " + d + " " + de); Variable v = new Variable(de.toString(), (Type) d); RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramDeclaration",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // paramDeclarationList ::= paramDeclarationList COMMA paramDeclaration 
            {
              Object RESULT =null;
		int plistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object plist = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("320 " + plist + ": " + p); ((ArrayList<Parameter>) plist).add((Parameter)p); RESULT = plist;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramDeclarationList",141, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // paramDeclarationList ::= paramDeclaration 
            {
              Object RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = Util.newList( (Parameter) pd );  Logger.print("319 parameter_declaration " + pd);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramDeclarationList",141, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // paramDeclarationListOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramDeclarationListOpt",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // paramDeclarationListOpt ::= paramDeclarationList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramDeclarationListOpt",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // paramDeclarationCls ::= paramDeclarationList COMMA DOTS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramDeclarationCls",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // paramDeclarationCls ::= paramDeclarationList 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p;  Logger.print("313 parameterDeclaration " + p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramDeclarationCls",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // parametersAndQualifiers ::= LPAR paramDeclarationCls RPAR 
            {
              Object RESULT =null;
		int pListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pList = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.print("310 paramsQualifiers (plist)");  RESULT = pList; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametersAndQualifiers",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // parametersAndQualifiers ::= LPAR RPAR 
            {
              Object RESULT =null;
		 Logger.print("309 paramsQualifiers ()" );      RESULT = new ArrayList<Parameter>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametersAndQualifiers",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // abstractDeclarator ::= DOTS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("abstractDeclarator",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // abstractDeclarator ::= parametersAndQualifiers trailingReturnType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("abstractDeclarator",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // abstractDeclarator ::= noPtrAbstractDeclarator parametersAndQualifiers trailingReturnType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("abstractDeclarator",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // abstractDeclarator ::= ptrAbstractDeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("abstractDeclarator",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // abstractDeclaratorOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("abstractDeclaratorOpt",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // abstractDeclaratorOpt ::= abstractDeclarator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("abstractDeclaratorOpt",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // typeId ::= typeSpecSeq abstractDeclaratorOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeId",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // aliasDeclaration ::= USING IDENTIFIER ASSIGNMENT typeId SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("aliasDeclaration",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // braceOrEqualInitializer ::= bracedInitList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("braceOrEqualInitializer",166, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // braceOrEqualInitializer ::= ASSIGNMENT initializeCls 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("braceOrEqualInitializer",166, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // initializer ::= LPAR exprListOpt RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer",165, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // initializer ::= braceOrEqualInitializer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializer",165, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // initializerOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializerOpt",164, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // initializerOpt ::= initializer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initializerOpt",164, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // initDeclarator ::= declarator ASSIGNMENT initializeCls 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  Logger.print("226 TODO: CHECK VARIABLE NAME " + d + " " + i); Variable v = new Variable(d.toString(), new Type("UNKNOWN")); Expression ex = (Expression) i; SemanticAnalysis.getInstance().toAssembly(SemanticAnalysis.labels+8+": ST " + d + ", " + (ex.getValue() == null ? "R1" : ex.getValue())); SemanticAnalysis.labels= SemanticAnalysis.labels+8; v.setValue(ex); RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initDeclarator",163, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // initDeclarator ::= declarator 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("295 " + d); RESULT = new Variable(d.toString(), new Type("UNKNOWN")); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initDeclarator",163, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // initDeclaratorList ::= initDeclaratorList COMMA initDeclarator 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("292 " + il + " " + id); RESULT = il; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initDeclaratorList",162, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // initDeclaratorList ::= initDeclarator 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("291 " + i); RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initDeclaratorList",162, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // initDeclaratorListOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initDeclaratorListOpt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // initDeclaratorListOpt ::= initDeclaratorList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initDeclaratorListOpt",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // simpleDecl ::= declSpec initDeclaratorList SEMICOLON 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.print("*!* 285 " + d + " " + i); ((Variable) i).setType((Type) d); SemanticAnalysis.getInstance().addVariable((Variable) i); RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleDecl",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // simpleDecl ::= declSpec SEMICOLON 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Logger.print("*!* 284 " + d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleDecl",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // blockDeclaration ::= aliasDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockDeclaration",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // blockDeclaration ::= simpleDecl 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("276 simpleDecl " + s ); RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockDeclaration",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // declaratorId ::= className 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaratorId",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // declaratorId ::= nestedNameSpec className 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaratorId",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // declaratorId ::= COLON COLON className 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaratorId",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // declaratorId ::= COLON COLON nestedNameSpecOpt className 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaratorId",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // declaratorId ::= DOTS idExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaratorId",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declaratorId ::= idExpr 
            {
              Object RESULT =null;
		int idEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object idE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("259 idExpr " + idE ); RESULT = idE; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaratorId",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // noPtrDeclarator ::= LPAR ptrDeclarator RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("noPtrDeclarator",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // noPtrDeclarator ::= noPtrDeclarator LSQRBRK RSQRBRK attributeSpecSeqOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("noPtrDeclarator",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // noPtrDeclarator ::= noPtrDeclarator LSQRBRK constExpr RSQRBRK attributeSpecSeqOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("noPtrDeclarator",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // noPtrDeclarator ::= noPtrDeclarator parametersAndQualifiers 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("253 noptrDeclarator " + n + " paramsQualifiers " + p ); RESULT = new Function(n.toString(), (ArrayList<Parameter>) p);; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("noPtrDeclarator",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // noPtrDeclarator ::= declaratorId 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("252 declaratorId " + d ); RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("noPtrDeclarator",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ptrDeclarator ::= ptrOperator ptrDeclarator 
            {
              Object RESULT =null;
		 Logger.print("249 ptrDeclarator "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ptrDeclarator",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ptrDeclarator ::= noPtrDeclarator 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("248 noPtrDeclarator " + n);  RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ptrDeclarator",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // declarator ::= noPtrDeclarator parametersAndQualifiers trailingReturnType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declarator ::= ptrDeclarator 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("244 ptrDeclarator " + p ); RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarator",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // memInitializerId ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("memInitializerId",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // memInitializerId ::= classOrDeclType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("memInitializerId",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // memInitializer ::= memInitializerId bracedInitList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("memInitializer",130, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // memInitializer ::= memInitializerId LPAR exprListOpt RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("memInitializer",130, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // memInitializerList ::= memInitializer COMMA memInitializerList dotsOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("memInitializerList",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // memInitializerList ::= memInitializer dotsOpt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("memInitializerList",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // functionBody ::= compoundStatement 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("229 funcBody -> compoundStatement " + c ); RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionBody",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // functionBody ::= COLON memInitializerList compoundStatement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionBody",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // simpleTypeSpec ::= declTypeSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // simpleTypeSpec ::= AUTO 
            {
              Object RESULT =null;
		 RESULT = new Type("auto");      Logger.print("auto");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // simpleTypeSpec ::= VOID 
            {
              Object RESULT =null;
		 RESULT = new Type("void");      Logger.print("void");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // simpleTypeSpec ::= DOUBLE 
            {
              Object RESULT =null;
		 RESULT = new Type("double");    Logger.print("double");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // simpleTypeSpec ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = new Type("float");     Logger.print("float");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // simpleTypeSpec ::= UNSIGNED 
            {
              Object RESULT =null;
		 RESULT = new Type("unsigned");  Logger.print("unsigned");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // simpleTypeSpec ::= SIGNED 
            {
              Object RESULT =null;
		 RESULT = new Type("signed");    Logger.print("signed");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // simpleTypeSpec ::= LONG 
            {
              Object RESULT =null;
		 RESULT = new Type("long");      Logger.print("long");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // simpleTypeSpec ::= INT 
            {
              Object RESULT =null;
		 RESULT = new Type("int");       Logger.print("int");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // simpleTypeSpec ::= SHORT 
            {
              Object RESULT =null;
		 RESULT = new Type("short");     Logger.print("short");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // simpleTypeSpec ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = new Type("bool");      Logger.print("bool");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // simpleTypeSpec ::= STRING 
            {
              Object RESULT =null;
		 RESULT = new Type("string");    Logger.print("string");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // simpleTypeSpec ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = new Type("char");      Logger.print("char");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // simpleTypeSpec ::= sepptrOpt nestedNameSpecOpt typeName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simpleTypeSpec",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // nestedNameSpec ::= nestedNameSpec IDENTIFIER COLON COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nestedNameSpec",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // nestedNameSpec ::= declTypeSpec COLON COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nestedNameSpec",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // nestedNameSpec ::= typeName COLON COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nestedNameSpec",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // nestedNameSpecOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nestedNameSpecOpt",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // nestedNameSpecOpt ::= nestedNameSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nestedNameSpecOpt",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sepptrOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sepptrOpt",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sepptrOpt ::= SEPPTR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sepptrOpt",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // trailingTypeSpec ::= cvQualifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trailingTypeSpec",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // trailingTypeSpec ::= typenameSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trailingTypeSpec",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // trailingTypeSpec ::= elaboratedTypeSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trailingTypeSpec",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // trailingTypeSpec ::= simpleTypeSpec 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("198 simpleTypeSpec " + s); RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("trailingTypeSpec",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // typedefName ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedefName",138, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // enumName ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enumName",137, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // typeName ::= typedefName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeName",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // typeName ::= enumName 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeName",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // typeName ::= className 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeName",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // typeSpec ::= enumSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeSpec",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // typeSpec ::= classSpec 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("185 classSpec " + c); RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeSpec",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // typeSpec ::= trailingTypeSpec 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("184 trailingTypeSpec " + t); RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeSpec",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // functionSpec ::= EXPLICIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionSpec",133, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // storageClassSpec ::= EXTERN 
            {
              Object RESULT =null;
		 RESULT = new Node("extern", "primario");  Logger.print("extern");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("storageClassSpec",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // storageClassSpec ::= STATIC 
            {
              Object RESULT =null;
		 RESULT = new Node("static", "primario");  Logger.print("static");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("storageClassSpec",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // storageClassSpec ::= REGISTER 
            {
              Object RESULT =null;
		 RESULT = new Node("register", "primario");  Logger.print("register");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("storageClassSpec",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // storageClassSpec ::= AUTO 
            {
              Object RESULT =null;
		 RESULT = new Node("auto", "primario");  Logger.print("auto");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("storageClassSpec",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declSpec ::= CONSTEXPR 
            {
              Object RESULT =null;
		 RESULT = new Node("constexpr", "primario");  Logger.print("constexpr"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declSpec",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declSpec ::= TYPEDEF 
            {
              Object RESULT =null;
		 RESULT = new Node("typedef", "primario");  Logger.print("typedef"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declSpec",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declSpec ::= FRIEND 
            {
              Object RESULT =null;
		 RESULT = new Node("friend", "primario");  Logger.print("friend"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declSpec",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declSpec ::= functionSpec 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("170 functionSpec" + f); RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declSpec",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declSpec ::= typeSpec 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("169 typeSpec" + t); RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declSpec",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declSpec ::= storageClassSpec 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("168 storageClassSpec" + s); RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declSpec",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declSpecSeq ::= declSpec declSpecSeq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declSpecSeq",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declSpecSeq ::= declSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declSpecSeq",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declSpecSeqOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declSpecSeqOpt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declSpecSeqOpt ::= declSpecSeq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declSpecSeqOpt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // functionDef ::= declSpec declarator NT$0 functionBody 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int deleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int deright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object de = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("159 " + d + " " + fb);  SemanticAnalysis.getInstance().exitCurrentScope(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionDef",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$0 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int deleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object de = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 Logger.print("pre-159 declSpec: " + d + " declarator: " + de); ((Function) de).setReturnType((Type) d); SemanticAnalysis.getInstance().addFunctionAndNewScope((Function) de); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",174, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // identifierOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifierOpt",127, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // identifierOpt ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifierOpt",127, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // linkageSpec ::= EXTERN stringLiteral declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("linkageSpec",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // linkageSpec ::= EXTERN stringLiteral LBRK declSpecSeqOpt RBRK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("linkageSpec",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // attributeDecl ::= attributeSpecSeq SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attributeDecl",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= attributeDecl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",123, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= emptyDeclaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",123, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= linkageSpec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",123, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= functionDef 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("133 "  + f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",123, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= blockDeclaration 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("132 "  + b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",123, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declarationSeq ::= declarationSeq declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarationSeq",122, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarationSeq ::= declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarationSeq",122, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarationSeqOpt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarationSeqOpt",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declarationSeqOpt ::= declarationSeq 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarationSeqOpt",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // translationUnit ::= declarationSeqOpt 
            {
              Object RESULT =null;
		 Logger.print("120 translationUnit"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("translationUnit",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= translationUnit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

